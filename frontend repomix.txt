This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-07T04:42:15.309Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitattributes
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/App.css
src/App.tsx
src/assets/react.svg
src/components/admin/AdminDashboard.tsx
src/components/admin/AdminLayout.tsx
src/components/admin/AdminLogin.tsx
src/components/admin/DriversManagement.tsx
src/components/admin/EditUserModal.tsx
src/components/admin/StudentsManagement.tsx
src/components/admin/UsersTable.tsx
src/components/auth/Login.tsx
src/components/auth/Register.tsx
src/components/common/LocationInput.tsx
src/components/layout/Footer.tsx
src/components/layout/Header.tsx
src/components/layout/Layout.tsx
src/components/ProtectedRoute.tsx
src/components/RouteGuard.tsx
src/constants/locations.ts
src/contexts/AuthContext.tsx
src/index.css
src/main.tsx
src/pages/InfoPage.tsx
src/pages/LandingPage.tsx
src/pages/profile/Profile.tsx
src/pages/profile/Settings.tsx
src/pages/rider/Dashboard.tsx
src/pages/rider/RiderHistory.tsx
src/pages/rides/EditRide.tsx
src/pages/rides/ScheduleRide.tsx
src/pages/user/Dashboard.tsx
src/pages/user/UserHistory.tsx
src/services/adminService.ts
src/services/api.ts
src/services/bookingService.ts
src/services/imageService.ts
src/services/index.ts
src/services/rideService.ts
src/services/userService.ts
src/types/auth.ts
src/types/enums.ts
src/types/index.ts
src/types/LocationInputTypes.ts
src/types/models.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "school-pool-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^3.9.1",
    "axios": "^1.7.9",
    "lucide-react": "^0.469.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.1",
    "react-router-dom": "^7.0.2",
    "react-toastify": "^11.0.2",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/node": "^22.10.2",
    "@types/react": "^18.3.17",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.13.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.1",
    "vite": "^6.0.3"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# school-pool-frontend

================
File: src/App.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

.prose ul {
  list-style: disc; /* Or 'circle', 'square', etc. */
  margin-left: 20px; /* Adjust as needed */
}

================
File: src/App.tsx
================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import { UserRole } from "./types/enums";

// Components
import ProtectedRoute from "./components/ProtectedRoute";
import RouteGuard from "./components/RouteGuard";

// Public Pages
import LandingPage from "./pages/LandingPage";
import Login from "./components/auth/Login";
import Register from "./components/auth/Register";

// Driver (Rider) Pages
import Dashboard from "./pages/rider/Dashboard";
import ScheduleRide from "./pages/rides/ScheduleRide";
import EditRide from "./pages/rides/EditRide";

// Common Pages
import Profile from "./pages/profile/Profile";
import Settings from "./pages/profile/Settings";
// Student Pages
import UserDashboard from "./pages/user/Dashboard";
import UserHistory from "./pages/user/UserHistory";
import RiderHistory from "./pages/rider/RiderHistory";
import DriversManagement from "./components/admin/DriversManagement";
import StudentsManagement from "./components/admin/StudentsManagement";
import AdminDashboard from "./components/admin/AdminDashboard";
import AdminLogin from "./components/admin/AdminLogin";
import InfoPage from "./pages/InfoPage";

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          {/* Public Routes */}
          <Route path="/" element={<LandingPage />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/info" element={<InfoPage />} />
          {/* Driver (Rider) Routes */}
          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <RouteGuard allowedRoles={[UserRole.DRIVER]}>
                  <Dashboard />
                </RouteGuard>
              </ProtectedRoute>
            }
          />
          <Route
            path="/rides/*"
            element={
              <ProtectedRoute>
                <RouteGuard allowedRoles={[UserRole.DRIVER]}>
                  <Routes>
                    <Route path="new" element={<ScheduleRide />} />
                    <Route path=":id/edit" element={<EditRide />} />
                    <Route path="history" element={<RiderHistory />} />
                  </Routes>
                </RouteGuard>
              </ProtectedRoute>
            }
          />
          {/* Student Routes */}
          <Route
            path="/user/*"
            element={
              <ProtectedRoute>
                <RouteGuard allowedRoles={[UserRole.STUDENT]}>
                  <Routes>
                    <Route path="dashboard" element={<UserDashboard />} />
                    <Route path="history" element={<UserHistory />} />
                    {/* Add additional student routes here */}
                  </Routes>
                </RouteGuard>
              </ProtectedRoute>
            }
          />
          {/* Common Protected Routes */}
          <Route
            path="/profile/*"
            element={
              <ProtectedRoute>
                <Routes>
                  <Route index element={<Profile />} />
                  <Route path="edit" element={<Settings />} />
                </Routes>
              </ProtectedRoute>
            }
          />
          {/* <Route
            path="/history"
            element={
              <ProtectedRoute>
                <UserHistory />
              </ProtectedRoute>
            }
          /> */}
          // In App.tsx, add these routes within your Routes component
          <Route
            path="/admin/*"
            element={
              <Routes>
                <Route path="login" element={<AdminLogin />} />
                <Route
                  path="dashboard"
                  element={
                    <ProtectedRoute>
                      <RouteGuard allowedRoles={[UserRole.ADMIN]}>
                        <AdminDashboard />
                      </RouteGuard>
                    </ProtectedRoute>
                  }
                />
                <Route
                  path="students"
                  element={
                    <ProtectedRoute>
                      <RouteGuard allowedRoles={[UserRole.ADMIN]}>
                        <StudentsManagement />
                      </RouteGuard>
                    </ProtectedRoute>
                  }
                />
                <Route
                  path="drivers"
                  element={
                    <ProtectedRoute>
                      <RouteGuard allowedRoles={[UserRole.ADMIN]}>
                        <DriversManagement />
                      </RouteGuard>
                    </ProtectedRoute>
                  }
                />
              </Routes>
            }
          />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/admin/AdminDashboard.tsx
================
// src/pages/admin/AdminDashboard.tsx
import React, { useEffect, useState } from 'react';
import { Users, Car, BarChart2 } from 'lucide-react';
import AdminLayout from '../../components/admin/AdminLayout';
import { UserRole } from '../../types';
import adminService from '../../services/adminService';

const AdminDashboard = () => {
  const [stats, setStats] = useState({
    totalStudents: 0,
    totalDrivers: 0,
    totalRides: 0
  });

  useEffect(() => {
    const loadStats = async () => {
      try {
        const users = await adminService.getAllUsers();
        setStats({
          totalStudents: users.filter(user => user.role === UserRole.STUDENT).length,
          totalDrivers: users.filter(user => user.role === UserRole.DRIVER).length,
          totalRides: 0 // This would come from ride statistics
        });
      } catch (error) {
        console.error('Error loading stats:', error);
      }
    };

    loadStats();
  }, []);

  return (
    <AdminLayout currentPage="dashboard">
      <h1 className="text-2xl font-bold mb-8">Dashboard Overview</h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Stats Cards */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <Users className="h-8 w-8 text-primary-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Students</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalStudents}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <Car className="h-8 w-8 text-primary-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Drivers</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalDrivers}</p>
            </div>
          </div>
        </div>

        {/* <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <BarChart2 className="h-8 w-8 text-primary-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Rides</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalRides}</p>
            </div>
          </div>
        </div> */}
      </div>
    </AdminLayout>
  );
};

export default AdminDashboard;

================
File: src/components/admin/AdminLayout.tsx
================
// src/components/admin/AdminLayout.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Users, UserCog, LogOut } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';

interface AdminLayoutProps {
  children: React.ReactNode;
  currentPage: 'dashboard' | 'students' | 'drivers';
}

const AdminLayout: React.FC<AdminLayoutProps> = ({ children, currentPage }) => {
  const navigate = useNavigate();
  const { logout } = useAuth();

  const handleLogout = () => {
    logout();
    navigate('/admin/login');
  };

  return (
    <div className="min-h-screen flex">
      {/* Sidebar */}
      <div className="w-64 bg-gray-800">
        <div className="p-4">
          <h1 className="text-xl font-bold text-white">Admin Dashboard</h1>
        </div>
        <nav className="mt-8">
          <div className="px-2 space-y-1">
            <button
              onClick={() => navigate('/admin/dashboard')}
              className={`w-full flex items-center px-4 py-2 text-sm rounded-md ${
                currentPage === 'dashboard' 
                  ? 'bg-gray-900 text-white' 
                  : 'text-gray-300 hover:bg-gray-700 hover:text-white'
              }`}
            >
              <Users className="mr-3 h-5 w-5" />
              <span>Dashboard</span>
            </button>
            <button
              onClick={() => navigate('/admin/students')}
              className={`w-full flex items-center px-4 py-2 text-sm rounded-md ${
                currentPage === 'students' 
                  ? 'bg-gray-900 text-white' 
                  : 'text-gray-300 hover:bg-gray-700 hover:text-white'
              }`}
            >
              <Users className="mr-3 h-5 w-5" />
              <span>Students</span>
            </button>
            <button
              onClick={() => navigate('/admin/drivers')}
              className={`w-full flex items-center px-4 py-2 text-sm rounded-md ${
                currentPage === 'drivers' 
                  ? 'bg-gray-900 text-white' 
                  : 'text-gray-300 hover:bg-gray-700 hover:text-white'
              }`}
            >
              <UserCog className="mr-3 h-5 w-5" />
              <span>Drivers</span>
            </button>
          </div>
        </nav>
        <div className="absolute bottom-4 w-64 px-2">
          <button
            onClick={handleLogout}
            className="w-full flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white rounded-md"
          >
            <LogOut className="mr-3 h-5 w-5" />
            <span>Logout</span>
          </button>
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1 overflow-auto">
        <div className="p-8">{children}</div>
      </div>
    </div>
  );
};

export default AdminLayout;

================
File: src/components/admin/AdminLogin.tsx
================
// src/pages/admin/AdminLogin.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth } from '../../contexts/AuthContext';
import { UserRole } from '../../types';
import { userService } from '../../services';

const loginSchema = z.object({
  phone: z.string().min(1, 'Phone number is required'),
  password: z.string().min(1, 'Password is required')
});

type LoginFormData = z.infer<typeof loginSchema>;

const AdminLogin = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema)
  });

  const onSubmit = async (data: LoginFormData) => {
    try {
      setIsSubmitting(true);
      setError('');
      
      const user = await userService.getUserById(data.phone);
      
      if (user.role !== UserRole.ADMIN) {
        setError('Access denied. Admin privileges required.');
        return;
      }

      if (user.password === data.password) {
        login(user);
        navigate('/admin/dashboard');
      } else {
        setError('Invalid credentials');
      }
    } catch (error) {
      setError('An error occurred during login');
      console.error('Login failed:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-8 bg-white rounded-lg shadow">
        <div>
          <h2 className="text-center text-3xl font-bold text-gray-900">
            Admin Login
          </h2>
        </div>

        {error && (
          <div className="bg-red-50 text-red-700 p-3 rounded">
            {error}
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Admin ID
            </label>
            <input
              {...register('phone')}
              type="text"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
            {errors.phone && (
              <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              {...register('password')}
              type="password"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
            )}
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50"
          >
            {isSubmitting ? 'Signing in...' : 'Sign in'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default AdminLogin;

================
File: src/components/admin/DriversManagement.tsx
================
// src/pages/admin/DriversManagement.tsx
import { useEffect, useState } from "react";
import AdminLayout from "../../components/admin/AdminLayout";
import UsersTable from "../../components/admin/UsersTable";
import { User, UserRole } from "../../types";
import adminService from "../../services/adminService";
import EditUserModal from "./EditUserModal";

const DriversManagement = () => {
  const [drivers, setDrivers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const [editingUser, setEditingUser] = useState<User | null>(null);

  const handleEditUser = (user: User) => {
    setEditingUser(user);
  };

  const handleSaveUser = async (updatedUser: User) => {
    try {
      await adminService.updateUser(updatedUser.phone, updatedUser);
      // Refresh the list
      await loadDrivers(); // or loadStudents() for StudentsManagement
      setEditingUser(null);
    } catch (error) {
      console.error("Error updating user:", error);
    }
  };

  useEffect(() => {
    loadDrivers();
  }, []);

  const loadDrivers = async () => {
    try {
      setIsLoading(true);
      const users = await adminService.getUsersByRole(UserRole.DRIVER);
      setDrivers(users);
    } catch (error) {
      console.error("Error loading drivers:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteDriver = async (driverId: string) => {
    if (window.confirm("Are you sure you want to delete this driver?")) {
      try {
        await adminService.deleteUser(driverId);
        await loadDrivers();
      } catch (error) {
        console.error("Error deleting driver:", error);
      }
    }
  };

  const handleVerifyDriver = async (driverId: string) => {
    try {
      await adminService.verifyDriver(driverId);
      await loadDrivers();
    } catch (error) {
      console.error("Error verifying driver:", error);
    }
  };

  return (
    <AdminLayout currentPage="drivers">
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">Drivers Management</h1>
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
          </div>
        ) : (
          <UsersTable
            users={drivers}
            onEdit={handleEditUser}
            onDelete={handleDeleteDriver}
            onVerify={handleVerifyDriver}
            showVerification={true}
          />
        )}
        {editingUser && (
          <EditUserModal
            user={editingUser}
            onClose={() => setEditingUser(null)}
            onSave={handleSaveUser}
          />
        )}
      </div>
    </AdminLayout>
  );
};

export default DriversManagement;

================
File: src/components/admin/EditUserModal.tsx
================
// src/components/admin/EditUserModal.tsx
import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { User, UserRole } from '../../types';
import { X } from 'lucide-react';

const vehicleSchema = z.object({
  make: z.string().min(1, 'Make is required'),
  model: z.string().min(1, 'Model is required'),
  licensePlate: z.string().min(1, 'License plate is required'),
  driversLicense: z.string().min(1, 'Driver\'s license is required')
});

const userSchema = z.object({
  firstName: z.string().min(2, 'First name is required'),
  lastName: z.string().min(2, 'Last name is required'),
  email: z.string().email('Invalid email'),
  universityEmail: z.string().email('Invalid university email')
    .refine(email => email.endsWith('.edu'), {
      message: 'Must be a valid university email'
    }),
  university: z.string().min(2, 'University name is required'),
  vehicleDetails: z.array(vehicleSchema).optional()
});

type EditUserFormData = z.infer<typeof userSchema>;

interface EditUserModalProps {
  user: User;
  onClose: () => void;
  onSave: (user: User) => Promise<void>;
}

const EditUserModal: React.FC<EditUserModalProps> = ({ user, onClose, onSave }) => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting }
  } = useForm<EditUserFormData>({
    resolver: zodResolver(userSchema),
    defaultValues: {
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      universityEmail: user.universityEmail,
      university: user.university,
      vehicleDetails: user.vehicleDetails
    }
  });

  const onSubmit = async (data: EditUserFormData) => {
    try {
      const updatedUser = {
        ...user,
        ...data
      };
      await onSave(updatedUser);
      onClose();
    } catch (error) {
      console.error('Error updating user:', error);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold">
            Edit {user.role === UserRole.DRIVER ? 'Driver' : 'Student'}
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Personal Information */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">First Name</label>
              <input
                {...register('firstName')}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.firstName && (
                <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Last Name</label>
              <input
                {...register('lastName')}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.lastName && (
                <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>
              )}
            </div>
          </div>

          {/* Contact Information */}
          <div>
            <label className="block text-sm font-medium text-gray-700">Email</label>
            <input
              {...register('email')}
              type="email"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">University Email</label>
            <input
              {...register('universityEmail')}
              type="email"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              disabled
            />
            {errors.universityEmail && (
              <p className="mt-1 text-sm text-red-600">{errors.universityEmail.message}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">University</label>
            <input
              {...register('university')}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              disabled
            />
            {errors.university && (
              <p className="mt-1 text-sm text-red-600">{errors.university.message}</p>
            )}
          </div>

          {/* Vehicle Details for Drivers */}
          {user.role === UserRole.DRIVER && (
            <div className="border-t pt-4" >
              <h3 className="text-lg font-medium mb-4">Vehicle Information</h3>
              <div className="space-y-4" >
                <div>
                  <label className="block text-sm font-medium text-gray-700">Make</label>
                  <input
                    {...register('vehicleDetails.0.make')}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  />
                  {errors.vehicleDetails?.[0]?.make && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.vehicleDetails[0].make.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">Model</label>
                  <input
                    {...register('vehicleDetails.0.model')}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  />
                  {errors.vehicleDetails?.[0]?.model && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.vehicleDetails[0].model.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">License Plate</label>
                  <input
                    {...register('vehicleDetails.0.licensePlate')}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  />
                  {errors.vehicleDetails?.[0]?.licensePlate && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.vehicleDetails[0].licensePlate.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">Driver's License</label>
                  <input
                    {...register('vehicleDetails.0.driversLicense')}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                    disabled
                  />
                  {errors.vehicleDetails?.[0]?.driversLicense && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.vehicleDetails[0].driversLicense.message}
                    </p>
                  )}
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-end space-x-4 pt-4 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:opacity-50"
            >
              {isSubmitting ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditUserModal;

================
File: src/components/admin/StudentsManagement.tsx
================
// src/pages/admin/StudentsManagement.tsx
import React, { useEffect, useState } from "react";
import AdminLayout from "../../components/admin/AdminLayout";
import UsersTable from "../../components/admin/UsersTable";
import { User, UserRole } from "../../types";
import adminService from "../../services/adminService";
import EditUserModal from "./EditUserModal";

const StudentsManagement = () => {
  const [students, setStudents] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const [editingUser, setEditingUser] = useState<User | null>(null);

  const handleEditUser = (user: User) => {
    setEditingUser(user);
  };

  const handleSaveUser = async (updatedUser: User) => {
    try {
      await adminService.updateUser(updatedUser.phone, updatedUser);
      // Refresh the list
      await loadStudents();
      setEditingUser(null);
    } catch (error) {
      console.error("Error updating user:", error);
    }
  };

  useEffect(() => {
    loadStudents();
  }, []);

  const loadStudents = async () => {
    try {
      setIsLoading(true);
      const users = await adminService.getUsersByRole(UserRole.STUDENT);
      setStudents(users);
    } catch (error) {
      console.error("Error loading students:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteStudent = async (studentId: string) => {
    if (window.confirm("Are you sure you want to delete this student?")) {
      try {
        await adminService.deleteUser(studentId);
        await loadStudents();
      } catch (error) {
        console.error("Error deleting student:", error);
      }
    }
  };

  return (
    <AdminLayout currentPage="students">
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">Students Management</h1>
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
          </div>
        ) : (
          <UsersTable
            users={students}
            onEdit={handleEditUser}
            onDelete={handleDeleteStudent}
          />
        )}
        {editingUser && (
          <EditUserModal
            user={editingUser}
            onClose={() => setEditingUser(null)}
            onSave={handleSaveUser}
          />
        )}
      </div>
    </AdminLayout>
  );
};

export default StudentsManagement;

================
File: src/components/admin/UsersTable.tsx
================
// src/components/admin/UsersTable.tsx
import React, { useState } from 'react';
import { User } from '../../types';
import { Edit2, Trash2, Eye, X, CheckCircle2 } from 'lucide-react';

interface UsersTableProps {
  users: User[];
  onEdit: (user: User) => void;
  onDelete: (userId: string) => void;
  onVerify?: (userId: string) => void;
  showVerification?: boolean;
}

const UsersTable: React.FC<UsersTableProps> = ({
  users,
  onEdit,
  onDelete,
  onVerify,
  showVerification = false
}) => {
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  const getImageUrl = (path: string | undefined) => {
    if (!path) return '';
    return `http://localhost:8081/images/${path}`;
  };

  const DetailsModal = ({ user }: { user: User }) => (
    
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full p-6 max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h3 className="text-xl font-bold">Driver Details</h3>
            <p className="text-gray-600">
              {user.firstName} {user.lastName}
            </p>
          </div>
          <button 
            onClick={() => setSelectedUser(null)}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* Driver Photos */}
          <div className="space-y-2">
            <h4 className="font-semibold">Driver Photo</h4>
            {user.vehicleDetails?.[0]?.driverPhotoPath ? (
              <img 
                src={getImageUrl(user.vehicleDetails[0].driverPhotoPath)} 
                alt="Driver"
                className="w-full h-64 object-cover rounded-lg border"
              />
            ) : (
              <div className="w-full h-64 bg-gray-100 flex items-center justify-center rounded-lg border">
                <p className="text-gray-500">No driver photo provided</p>
              </div>
            )}
          </div>

          <div className="space-y-2">
            <h4 className="font-semibold">License Photo</h4>
            {user.vehicleDetails?.[0]?.licensePhotoPath ? (
                
              <img 
                src={getImageUrl(user.vehicleDetails[0].licensePhotoPath)} 
                alt="License"
                className="w-full h-64 object-cover rounded-lg border"
              />
            ) : (
              <div className="w-full h-64 bg-gray-100 flex items-center justify-center rounded-lg border">
                <p className="text-gray-500">No license photo provided</p>
              </div>
            )}
          </div>

          {/* Contact Information */}
          <div className="md:col-span-2">
            <h4 className="font-semibold mb-2">Contact Information</h4>
            <div className="bg-gray-50 p-4 rounded-lg">
              <dl className="grid grid-cols-2 gap-4">
                <div>
                  <dt className="text-sm text-gray-600">Phone</dt>
                  <dd>{user.phone}</dd>
                </div>
                <div>
                  <dt className="text-sm text-gray-600">Email</dt>
                  <dd>{user.email}</dd>
                </div>
                <div>
                  <dt className="text-sm text-gray-600">University</dt>
                  <dd>{user.university}</dd>
                </div>
                <div>
                  <dt className="text-sm text-gray-600">University Email</dt>
                  <dd>{user.universityEmail}</dd>
                </div>
              </dl>
            </div>
          </div>

          {/* Vehicle Details */}
          {user.vehicleDetails?.[0] && (
            <div className="md:col-span-2">
              <h4 className="font-semibold mb-2">Vehicle Information</h4>
              <div className="bg-gray-50 p-4 rounded-lg">
                <dl className="grid grid-cols-2 gap-4">
                  <div>
                    <dt className="text-sm text-gray-600">Make</dt>
                    <dd>{user.vehicleDetails[0].make}</dd>
                  </div>
                  <div>
                    <dt className="text-sm text-gray-600">Model</dt>
                    <dd>{user.vehicleDetails[0].model}</dd>
                  </div>
                  <div>
                    <dt className="text-sm text-gray-600">License Plate</dt>
                    <dd>{user.vehicleDetails[0].licensePlate}</dd>
                  </div>
                  <div>
                    <dt className="text-sm text-gray-600">Driver's License</dt>
                    <dd>{user.vehicleDetails[0].driversLicense}</dd>
                  </div>
                </dl>
              </div>
            </div>
          )}
        </div>

        {showVerification && !user.isDriverVerified && (
          <div className="mt-6 flex justify-end space-x-4">
            <button
              onClick={() => setSelectedUser(null)}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              onClick={() => {
                onVerify?.(user.phone);
                setSelectedUser(null);
              }}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Verify Driver
            </button>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Name
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Phone
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Email
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              University
            </th>
            {showVerification && (
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Verified
              </th>
            )}
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {users.map((user) => (
            <tr key={user.phone} className="hover:bg-gray-50">
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm font-medium text-gray-900">
                  {user.firstName} {user.lastName}
                </div>
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {user.phone}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {user.email}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {user.university}
              </td>
              {showVerification && (
                <td className="px-6 py-4 whitespace-nowrap">
                  {user.isDriverVerified ? (
                    <span className="flex items-center text-green-600">
                      <CheckCircle2 className="h-5 w-5 mr-1" />
                      Verified
                    </span>
                  ) : (
                    <button
                      onClick={() => setSelectedUser(user)}
                      className="flex items-center text-primary-600 hover:text-primary-900"
                    >
                      <Eye className="h-5 w-5 mr-1" />
                      View Details
                    </button>
                  )}
                </td>
              )}
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => onEdit(user)}
                    className="text-primary-600 hover:text-primary-900"
                    title="Edit user"
                  >
                    <Edit2 className="h-5 w-5" />
                  </button>
                  <button
                    onClick={() => onDelete(user.phone)}
                    className="text-red-600 hover:text-red-900"
                    title="Delete user"
                  >
                    <Trash2 className="h-5 w-5" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {selectedUser && <DetailsModal user={selectedUser} />}
    </div>
  );
};

export default UsersTable;

================
File: src/components/auth/Login.tsx
================
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import Layout from '../layout/Layout';
import { userService } from '../../services';
import { useAuth } from '../../contexts/AuthContext';
import { UserRole } from '../../types/enums';

const loginSchema = z.object({
  phone: z.string().min(10, 'Valid phone number is required'),
  password: z.string().min(1, 'Password is required')
});

type LoginFormData = z.infer<typeof loginSchema>;

const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema)
  });

  const onSubmit = async (data: LoginFormData) => {
    try {
      setIsSubmitting(true);
      setError('');

      const user = await userService.userLogin(data);
      
      if (user) {
        login(user); // Store user in auth context
        console.log(user)
        
        // Redirect based on user role
        if (user.role === UserRole.STUDENT) {
          navigate('/user/dashboard');
        } else if (user.role === UserRole.DRIVER) {
          navigate('/dashboard');
        }
      } else {
        setError('Invalid credentials');
      }
    } catch (error) {
      setError('An error occurred during login');
      console.error('Login failed:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Layout>
      <div className="max-w-md mx-auto pt-20 pb-16 px-4 sm:px-6 lg:px-8">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-gray-900">Sign in to your account</h1>
          <p className="mt-2 text-sm text-gray-600">
            Don't have an account?{' '}
            <Link to="/register" className="text-primary-600 hover:text-primary-500">
              Sign up
            </Link>
          </p>
        </div>

        <div className="mt-8">
          {error && (
            <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
              {error}
            </div>
          )}

          <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Phone Number
              </label>
              <input
                {...register('phone')}
                type="tel"
                placeholder="(123) 456-7890"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500"
              />
              {errors.phone && (
                <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Password
              </label>
              <input
                {...register('password')}
                type="password"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>

            <div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50"
              >
                {isSubmitting ? 'Signing in...' : 'Sign in'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
};

export default Login;

================
File: src/components/auth/Register.tsx
================
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { UserRole } from '../../types';
import { userService } from '../../services';
import Layout from '../layout/Layout';

const vehicleSchema = z.object({
  make: z.string().min(1, 'Make is required'),
  model: z.string().min(1, 'Model is required'),
  licensePlate: z.string().min(1, 'License plate is required'),
  driversLicense: z.string().min(1, 'Driver\'s license is required')
 });
 
 const registerSchema = z.object({
  firstName: z.string().min(2, 'First name is required'),
  lastName: z.string().min(2, 'Last name is required'),
  email: z.string().email('Invalid email'),
  phone: z.string().min(10, 'Valid phone number is required'),
  universityEmail: z.string().email('Invalid university email')
    .refine(email => email.endsWith('.edu'), {
      message: 'Must be a valid university email'
    }),
  university: z.string().min(2, 'University name is required'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one uppercase letter, one lowercase letter, and one number'),
  confirmPassword: z.string(),
  role: z.nativeEnum(UserRole),
  vehicleDetails: z.array(vehicleSchema).optional(),
  rating: z.number().default(0),
  isDriverVerified: z.boolean().default(false)
 }).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
 });

 type RegisterFormData = z.infer<typeof registerSchema>;

 const Register = () => {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [driverPhoto, setDriverPhoto] = useState<File | null>(null);
  const [licensePhoto, setLicensePhoto] = useState<File | null>(null);
 
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors }
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      role: UserRole.STUDENT,
      rating: 0,
      isDriverVerified: false
    }
  });

  const userRole = watch('role');

  const onSubmit = async (data: RegisterFormData) => {
    try {
      setIsSubmitting(true);
      const { confirmPassword, ...registerData } = data;
      await userService.register(registerData, driverPhoto || undefined, licensePhoto || undefined);
      navigate('/login');
      console.log('User Registration Successful');
    } catch (error) {
      console.error('Registration failed:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Layout>
      <div className="max-w mx-auto pt-2 pb-2 px-4 sm:px-6 lg:px-0">
        <div className="text-center">
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Create your account
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Already have an account?{' '}
          <Link to="/login" className="font-medium text-primary-600 hover:text-primary-500">
            Sign in
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
            {/* Personal Information */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">First Name</label>
                <input
                  {...register('firstName')}
                  type="text"
                  placeholder="John"
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                />
                {errors.firstName && (
                  <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">Last Name</label>
                <input
                  {...register('lastName')}
                  type="text"
                  placeholder="Doe"
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                />
                {errors.lastName && (
                  <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>
                )}
              </div>
            </div>

            {/* Contact Information */}
            <div>
              <label className="block text-sm font-medium text-gray-700">Phone Number</label>
              <input
                {...register('phone')}
                type="tel"
                placeholder="(123) 456-7890"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.phone && (
                <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Personal Email</label>
              <input
                {...register('email')}
                type="email"
                placeholder="john.doe@example.com"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>

            {/* University Information */}
            <div>
              <label className="block text-sm font-medium text-gray-700">University Email</label>
              <input
                {...register('universityEmail')}
                type="email"
                placeholder="john.doe@university.edu"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.universityEmail && (
                <p className="mt-1 text-sm text-red-600">{errors.universityEmail.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">University</label>
              <input
                {...register('university')}
                type="text"
                placeholder="Your University Name"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.university && (
                <p className="mt-1 text-sm text-red-600">{errors.university.message}</p>
              )}
            </div>

            {/* Password Fields */}
            <div>
              <label className="block text-sm font-medium text-gray-700">Password</label>
              <input
                {...register('password')}
                type="password"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Confirm Password</label>
              <input
                {...register('confirmPassword')}
                type="password"
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              />
              {errors.confirmPassword && (
                <p className="mt-1 text-sm text-red-600">{errors.confirmPassword.message}</p>
              )}
            </div>

            {/* Role Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700">I want to</label>
              <select
                {...register('role')}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              >
                <option value={UserRole.STUDENT}>Find Rides</option>
                <option value={UserRole.DRIVER}>Give Rides</option>
              </select>
            </div>

            {/* Vehicle Details - Conditionally rendered */}
            {userRole === UserRole.DRIVER && (
                   <div className="space-y-4 animate-fadeIn">
                     <div className="border-t pt-4">
                       <h3 className="text-lg font-medium text-gray-900 mb-4">Vehicle Details</h3>
                       <div className="space-y-4">
                         {/* Make, Model, License Plate fields remain same */}
                         <div>
                      <label className="block text-sm font-medium text-gray-700">Manufacturing Company</label>
                      <input
                        {...register('vehicleDetails.0.make')}
                        placeholder="e.g., Toyota"
                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                      />
                      {errors.vehicleDetails?.[0]?.make && (
                        <p className="mt-1 text-sm text-red-600">
                          {errors.vehicleDetails[0].make.message}
                        </p>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Model</label>
                      <input
                        {...register('vehicleDetails.0.model')}
                        placeholder="e.g., Camry"
                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                      />
                      {errors.vehicleDetails?.[0]?.model && (
                        <p className="mt-1 text-sm text-red-600">
                          {errors.vehicleDetails[0].model.message}
                        </p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700">License Plate</label>
                      <input
                        {...register('vehicleDetails.0.licensePlate')}
                        placeholder="e.g., ABC123"
                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                      />
                      {errors.vehicleDetails?.[0]?.licensePlate && (
                        <p className="mt-1 text-sm text-red-600">
                          {errors.vehicleDetails[0].licensePlate.message}
                        </p>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Driver's License</label>
                      <input
                        {...register('vehicleDetails.0.driversLicense')}
                        placeholder="e.g., DL123456789"
                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                      />
                      {errors.vehicleDetails?.[0]?.driversLicense && (
                        <p className="mt-1 text-sm text-red-600">
                          {errors.vehicleDetails[0].driversLicense.message}
                        </p>
                      )}
                    </div>
                         
                         {/* Add photo upload fields */}
                         <div>
                           <label className="block text-sm font-medium text-gray-700">
                             Driver Photo
                           </label>
                           <input
                             type="file"
                             accept="image/*"
                             onChange={(e) => setDriverPhoto(e.target.files?.[0] || null)}
                             className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                           />
                         </div>

                         <div>
                           <label className="block text-sm font-medium text-gray-700">
                             License Photo
                           </label>
                           <input
                             type="file"
                             accept="image/*"
                             onChange={(e) => setLicensePhoto(e.target.files?.[0] || null)}
                             className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                           />
                         </div>
                       </div>
                     </div>
                   </div>
                 )}

            <div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50"
              >
                {isSubmitting ? 'Registering...' : 'Register'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
    </div>
    </div>
    </Layout>
  );
};

export default Register;

================
File: src/components/common/LocationInput.tsx
================
// LocationInput.tsx
import React, { useState } from "react";
import { MapPin } from "lucide-react";
import { LocationInputProps } from "../../types/LocationInputTypes";

const LocationInput: React.FC<LocationInputProps> = ({
  placeholder,
  error,
  name,
  register,
  value,
  onChange,
}) => {
  const [suggestions, setSuggestions] = useState<any[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);

  const searchLocation = async (query: string) => {
    if (query.length < 3) {
      setSuggestions([]);
      return;
    }

    try {
      const apiKey = import.meta.env.VITE_MAP_API_KEY;
      console.log(`API Key being used: ${apiKey}`);
      const response = await fetch(
        `https://api.locationiq.com/v1/autocomplete?key=${apiKey}&q=${encodeURIComponent(
          query
        )}&limit=5&countrycodes=us`
      );

      const data = await response.json();
      setSuggestions(data || []);
    } catch (error) {
      console.error("Location search failed:", error);
      setSuggestions([]);
    }
  };

  return (
    <div>
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <MapPin className="h-5 w-5 text-gray-400" />
        </div>
        <input
          {...register(name)}
          type="text"
          className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
          placeholder={placeholder}
          value={value}
          onChange={(e) => {
            searchLocation(e.target.value);
            onChange(e.target.value);
            setShowSuggestions(true);
          }}
          onFocus={() => setShowSuggestions(true)}
          onBlur={() => {
            setTimeout(() => setShowSuggestions(false), 200);
          }}
        />
      </div>

      {showSuggestions && suggestions.length > 0 && (
        <div className="absolute z-50 w-full mt-1 bg-white rounded-md shadow-lg border border-gray-200 max-h-60 overflow-y-auto">
          {suggestions.map((suggestion) => (
            <div
              key={suggestion.place_id}
              className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm"
              onClick={() => {
                const input = document.querySelector(
                  `input[name="${name}"]`
                ) as HTMLInputElement;
                if (input) {
                  input.value = suggestion.display_name;
                  input.dispatchEvent(new Event("input", { bubbles: true }));
                }
                setShowSuggestions(false);
              }}
            >
              {suggestion.display_name}
            </div>
          ))}
        </div>
      )}

      {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
    </div>
  );
};

export default LocationInput;

================
File: src/components/layout/Footer.tsx
================
import React from 'react';
import { Link } from 'react-router-dom';
import { Facebook, Twitter, Instagram, Mail } from 'lucide-react';

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-50 border-t">
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Brand Section */}
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-primary-600">SchoolPool</h3>
            <p className="text-gray-600">
              Making student transportation safe, affordable, and convenient.
            </p>
            <div className="flex space-x-4">
              <a href="#" className="text-gray-400 hover:text-primary-600">
                <Facebook size={20} />
              </a>
              <a href="#" className="text-gray-400 hover:text-primary-600">
                <Twitter size={20} />
              </a>
              <a href="#" className="text-gray-400 hover:text-primary-600">
                <Instagram size={20} />
              </a>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="font-semibold mb-4">Quick Links</h4>
            <ul className="space-y-2">
              <li>
                <Link to="/info#about" className="text-gray-600 hover:text-primary-600">About Us</Link>
              </li>
              <li>
                <Link to="/info#how-it-works" className="text-gray-600 hover:text-primary-600">How It Works</Link>
              </li>
              <li>
                <Link to="/info#safety" className="text-gray-600 hover:text-primary-600">Safety</Link>
              </li>
              <li>
                <Link to="/info#universities" className="text-gray-600 hover:text-primary-600">Universities</Link>
              </li>
            </ul>
          </div>

          {/* Support */}
          <div>
            <h4 className="font-semibold mb-4">Support</h4>
            <ul className="space-y-2">
              <li>
                <Link to="/info#help" className="text-gray-600 hover:text-primary-600">Help Center</Link>
              </li>
              <li>
                <Link to="/info#privacy" className="text-gray-600 hover:text-primary-600">Privacy Policy</Link>
              </li>
              <li>
                <Link to="/info#terms" className="text-gray-600 hover:text-primary-600">Terms of Service</Link>
              </li>
              <li>
                <Link to="/admin/login" className="text-gray-600 hover:text-primary-600">Admin Login</Link>
              </li>
            </ul>
          </div>

          {/* Contact */}
          <div>
            <h4 className="font-semibold mb-4">Contact Us</h4>
            <div className="space-y-2">
              <p className="flex items-center text-gray-600">
                <Mail size={16} className="mr-2" />
                <a href="mailto:support@schoolpool.com" className="hover:text-primary-600">
                  support@schoolpool.com
                </a>
              </p>
            </div>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="mt-8 pt-8 border-t border-gray-200">
          <p className="text-center text-gray-500">
            © {new Date().getFullYear()} SchoolPool. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

================
File: src/components/layout/Header.tsx
================
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { Menu, X, ChevronDown, LogOut, User, History } from "lucide-react";
import { useAuth } from "../../contexts/AuthContext";
import { UserRole } from "../../types/enums";

const Header: React.FC = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const { user, logout } = useAuth();

  const handleLogout = () => {
    logout();
    window.location.href = "/login";
  };
  const getHistoryPath = (userRole?: UserRole) => {
    return userRole === UserRole.STUDENT ? "/user/history" : "/rides/history";
  };

  return (
    <header className="bg-white shadow-sm fixed w-full top-0 z-50">
      <nav className="container mx-auto px-4 py-3">
        <div className="flex justify-between items-center">
          {/* Logo */}
          <Link to="/" className="flex items-center space-x-2">
            <span className="text-2xl font-bold text-primary-600">
              SchoolPool
            </span>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-8">
            {!user ? (
              <>
                <Link
                  to="/info#about"
                  className="text-gray-600 hover:text-primary-600"
                >
                  About
                </Link>
                <Link
                  to="/info#how-it-works"
                  className="text-gray-600 hover:text-primary-600"
                >
                  How It Works
                </Link>
                <Link
                  to="/info#contact"
                  className="text-gray-600 hover:text-primary-600"
                >
                  Contact
                </Link>
                <div className="space-x-4">
                  <Link
                    to="/login"
                    className="px-4 py-2 text-primary-600 hover:text-primary-700"
                  >
                    Login
                  </Link>
                  <Link
                    to="/register"
                    className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
                  >
                    Sign Up
                  </Link>
                </div>
              </>
            ) : (
              <>
                <Link
                  to="/info#about"
                  className="text-gray-600 hover:text-primary-600"
                >
                  About
                </Link>
                <Link
                  to="/info#how-it-works"
                  className="text-gray-600 hover:text-primary-600"
                >
                  How It Works
                </Link>
                <Link
                  to="/info#contact"
                  className="text-gray-600 hover:text-primary-600"
                >
                  Contact
                </Link>
                <div className="relative">
                  <button
                    onClick={() => setIsProfileOpen(!isProfileOpen)}
                    className="flex items-center space-x-2 text-gray-700 hover:text-primary-600 px-4 py-2 rounded-md hover:bg-gray-50"
                  >
                    <span>{user.firstName}</span>
                    <ChevronDown size={20} />
                  </button>

                  {isProfileOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 border border-gray-100">
                      <Link
                        to="/profile"
                        className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                        onClick={() => setIsProfileOpen(false)}
                      >
                        <User size={16} className="mr-2" />
                        Profile
                      </Link>
                      <Link
                        to={getHistoryPath(user?.role)}
                        className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                        onClick={() => setIsProfileOpen(false)}
                      >
                        <History size={16} className="mr-2" />
                        History
                      </Link>

                      <button
                        onClick={handleLogout}
                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        <LogOut size={16} className="mr-2" />
                        Logout
                      </button>
                    </div>
                  )}
                </div>
              </>
            )}
          </div>

          {/* Mobile Menu Button */}
          <button
            className="md:hidden"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            {isMenuOpen ? <X /> : <Menu />}
          </button>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden mt-4 pb-4">
            <div className="flex flex-col space-y-4">
              {!user ? (
                <>
                  <Link
                    to="/info#about"
                    className="text-gray-600 hover:text-primary-600"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    About
                  </Link>
                  <Link
                    to="/info#how-it-works"
                    className="text-gray-600 hover:text-primary-600"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    How It Works
                  </Link>
                  <Link
                    to="/info#contact"
                    className="text-gray-600 hover:text-primary-600"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Contact
                  </Link>
                  <Link
                    to="/login"
                    className="block px-4 py-2 text-center text-primary-600 hover:text-primary-700"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Login
                  </Link>
                  <Link
                    to="/register"
                    className="block px-4 py-2 text-center bg-primary-600 text-white rounded-md hover:bg-primary-700"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Sign Up
                  </Link>
                </>
              ) : (
                <>
                  <Link
                    to="/profile"
                    className="text-gray-600 hover:text-primary-600"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Profile
                  </Link>
                  <button
                    onClick={handleLogout}
                    className="text-gray-600 hover:text-primary-600 text-left"
                  >
                    Logout
                  </button>
                </>
              )}
            </div>
          </div>
        )}
      </nav>
    </header>
  );
};

export default Header;

================
File: src/components/layout/Layout.tsx
================
import React from 'react';
import Header from './Header';
import Footer from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow pt-16">
        {children}
      </main>
      <Footer />
    </div>
  );
};

export default Layout;

================
File: src/components/ProtectedRoute.tsx
================
// src/components/ProtectedRoute.tsx
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

================
File: src/components/RouteGuard.tsx
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { UserRole } from '../types';

interface RouteGuardProps {
  children: React.ReactNode;
  allowedRoles: UserRole[];
}

const RouteGuard: React.FC<RouteGuardProps> = ({ children, allowedRoles }) => {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" />;
  }

  if (!allowedRoles.includes(user.role)) {
    // Redirect to appropriate dashboard based on role
    if (user.role === UserRole.STUDENT) {
      return <Navigate to="/user/dashboard" />;
    } else {
      return <Navigate to="/dashboard" />;
    }
  }

  return <>{children}</>;
};

export default RouteGuard;

================
File: src/constants/locations.ts
================
export const LOCATIONS = {
    Cambridge: "Cambridge Square Apartments",
    Carson: "Carson Street Towers",
    CorbinCrossing: "Corbin Crossing Apartments",
    CorbinGreens: "Corbin Greens",
    Downtown: "Downtown Kansas City",
    Fairways: "The Fairways at Corbin Park",
    LakesLionsgate: "Lakes at Lionsgate",
    LeesSummit: "Lees Summit",
    Leewood: "Leewood Apartments",
    Lodge: "Lodge of Overland Park",
    MIC: "Missouri Innovation Campus",
    OverlandPark: "Overland Park",
    PointeRoyal: "Pointe Royal",
    Prairiefire: "Residences at Prairiefire",
    Sandstone: "Sandstone Creek",
    Savoy: "Savoy Apartments",
    Skylar: "Skylar Ridge Apartments",
    Warrensburg: "University of Central Missouri - Warrensburg",
    UMKC: "University of Missouri - Kansas City",
    VillageLionsgate: "Village at Lionsgate"
  } as const;

================
File: src/contexts/AuthContext.tsx
================
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { User } from '../types';

interface AuthContextType {
  user: User | null;
  setUser: (user: User | null) => void;
  login: (userData: User) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(() => {
    const savedUser = localStorage.getItem('user');
    return savedUser ? JSON.parse(savedUser) : null;
  });

  const login = (userData: User) => {
    localStorage.setItem('user', JSON.stringify(userData));
    setUser(userData);
  };

  const logout = () => {
    localStorage.removeItem('user');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, setUser, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeIn {
  animation: fadeIn 0.3s ease-out;
}

.prose ul {
  list-style: disc; /* Or 'circle', 'square', etc. */
  margin-left: 20px; /* Adjust as needed */
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/pages/InfoPage.tsx
================
// src/pages/InfoPage.tsx
import React from "react";
import Layout from "../components/layout/Layout";
import { Shield, Info, HelpCircle, School, Settings } from "lucide-react";

const InfoPage = () => {
  return (
    <Layout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* About Us Section */}
        <section id="about" className="mb-16">
          <div className="flex items-center mb-6">
            <Info className="h-8 w-8 text-primary-600 mr-3" />
            <h2 className="text-3xl font-bold text-gray-900">About Us</h2>
          </div>
          <div className="prose max-w-none">
            <p>
              SchoolPool is a dedicated ride-sharing platform designed
              specifically for university students. Born from the unique
              transportation challenges faced by international and domestic
              students, our platform connects students who need rides with
              fellow students who can offer them.
            </p>
            <p>
              Our mission is to make student transportation safe, affordable,
              and convenient, particularly for those facing challenges with
              inter-state travel, airport transfers, and daily commutes to
              campus. We understand the specific needs of students, including
              the preference for cash payments and the importance of connecting
              with peers from the same university community.
            </p>
          </div>
        </section>

        {/* How It Works Section */}
        <section id="how-it-works" className="mb-16">
          <div className="flex items-center mb-6">
            <Settings className="h-8 w-8 text-primary-600 mr-3" />
            <h2 className="text-3xl font-bold text-gray-900">How It Works</h2>
          </div>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="text-xl font-semibold mb-4">1. Sign Up</div>
              <p>
                Register using your university email address. Choose whether you
                want to be a rider (looking for rides) or a driver (offering
                rides). Drivers will need to provide additional verification
                documents.
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="text-xl font-semibold mb-4">
                2. Find or Offer Rides
              </div>
              <p>
                Drivers can post their travel schedules and available seats.
                Riders can search for available rides that match their needs and
                send ride requests.
              </p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="text-xl font-semibold mb-4">
                3. Travel Together
              </div>
              <p>
                Once a ride is confirmed, meet your fellow students and share
                the journey. Payments are handled in cash directly between
                riders and drivers.
              </p>
            </div>
          </div>
        </section>

        {/* Safety Section */}
        <section id="safety" className="mb-16">
          <div className="flex items-center mb-6">
            <Shield className="h-8 w-8 text-primary-600 mr-3" />
            <h2 className="text-3xl font-bold text-gray-900">Safety</h2>
          </div>
          <div className="prose max-w-none">
            <h3>Our Commitment to Safety</h3>
            <ul>
              <li>
                Verified university email addresses required for all users
              </li>
              <li>
                Driver verification process including photo ID and vehicle
                documentation
              </li>
              <li>In-app safety features and emergency contacts</li>
              <li>Community rating system</li>
              <li>
                Direct communication between riders and drivers through the
                platform
              </li>
            </ul>
            <p>
              Every driver undergoes a verification process before being
              approved to offer rides. This includes checking their driver's
              license, vehicle registration, and university affiliation. We
              maintain a strict code of conduct and take user reports seriously.
            </p>
          </div>
        </section>

        {/* Universities Section */}
        <section id="universities" className="mb-16">
          <div className="flex items-center mb-6">
            <School className="h-8 w-8 text-primary-600 mr-3" />
            <h2 className="text-3xl font-bold text-gray-900">Universities</h2>
          </div>
          <div className="prose max-w-none">
            <p>
              SchoolPool currently serves students from various universities in
              the Kansas/Missouri area, including:
            </p>
            <ul>
              <li>University of Central Missouri (UCM)</li>
              <li>University of Missouri-Kansas City (UMKC)</li>
              <li>Missouri Innovation Campus (MIC)</li>
              <li>And more coming soon!</li>
            </ul>
            <p>
              We're continuously expanding our network to serve more
              universities and students. If you'd like to see SchoolPool at your
              university, please contact us!
            </p>
          </div>
        </section>

        {/* Help Center Section */}
        <section id="help" className="mb-16">
          <div className="flex items-center mb-6">
            <HelpCircle className="h-8 w-8 text-primary-600 mr-3" />
            <h2 className="text-3xl font-bold text-gray-900">Help Center</h2>
          </div>
          <div className="prose max-w-none">
            <h2 className="font-bold">Frequently Asked Questions</h2>
            <div className="space-y-4">
              <div>
                <h4 className="font-bold">How do payments work?</h4>
                <p>
                  All payments are made in cash directly between riders and
                  drivers.
                </p>
              </div>
              <div>
                <h4 className="font-bold">What if I need to cancel a ride?</h4>
                <p>
                  Rides can be cancelled through the platform. We recommend
                  giving as much notice as possible.
                </p>
              </div>
              <div>
                <h4 className="font-bold">How do I become a driver?</h4>
                <p>
                  Register as a driver and submit your verification documents
                  including driver's license, vehicle registration, and photos.
                </p>
              </div>
            </div>
          </div>
        </section>

        {/* Privacy & Terms Section */}
        <section id="legal" className="grid md:grid-cols-2 gap-8">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Privacy Policy
            </h2>
            <div className="prose">
              <p>
                We take your privacy seriously. Your personal information is
                only used to facilitate rides and verify your identity. We never
                share your information with third parties without your consent.
              </p>
              <p className="font-bold">Data we collect includes:</p>
              <ul>
                <li>University email address</li>
                <li>Basic profile information</li>
                <li>Ride history</li>
                <li>Driver verification documents</li>
              </ul>
            </div>
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Terms of Service
            </h2>
            <div className="prose">
              <p>By using SchoolPool, you agree to:</p>
              <ul>
                <li>Provide accurate information about yourself</li>
                <li>Follow our community guidelines</li>
                <li>Respect other users' privacy and safety</li>
                <li>Use the platform only for its intended purpose</li>
                <li>Handle payments responsibly and as agreed</li>
              </ul>
            </div>
          </div>
        </section>
      </div>
    </Layout>
  );
};

export default InfoPage;

================
File: src/pages/LandingPage.tsx
================
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Car, Shield, DollarSign, Users } from "lucide-react";
import Layout from "../components/layout/Layout";
import { useAuth } from "../contexts/AuthContext";

const LandingPage: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();

  useEffect(() => {
    const savedUser = localStorage.getItem("user");
    if (savedUser) {
      navigate("/dashboard");
    }
  }, [navigate]);

  const handleGetStarted = () => {
    const savedUser = localStorage.getItem("user");
    if (savedUser) {
      navigate("/dashboard");
    } else {
      navigate("/login");
    }
  };

  return (
    <Layout>
      {/* Hero Section */}
      <section className="bg-gradient-to-b from-primary-50 to-white py-20">
        <div className="container mx-auto px-4">
          <div className="max-w-3xl mx-auto text-center">
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
              Student Rides Made Simple
            </h1>
            <p className="text-xl text-gray-600 mb-8">
              Connect with fellow students for safe and affordable rides to
              campus and beyond.
            </p>
            <div className="space-x-4">
              <button
                onClick={handleGetStarted}
                className="px-6 py-3 bg-primary-600 text-white rounded-md hover:bg-primary-700"
              >
                Get Started
              </button>
              <button
                onClick={() => navigate("/how-it-works")}
                className="px-6 py-3 border border-primary-600 text-primary-600 rounded-md hover:bg-primary-50"
              >
                Learn More
              </button>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">
            Why Choose SchoolPool?
          </h2>
          <div className="grid md:grid-cols-4 gap-8">
            <FeatureCard
              icon={<Shield className="h-8 w-8 text-primary-600" />}
              title="Safe Rides"
              description="Verified student drivers and university email verification"
            />
            <FeatureCard
              icon={<DollarSign className="h-8 w-8 text-primary-600" />}
              title="Save Money"
              description="Split costs with fellow students going the same way"
            />
            <FeatureCard
              icon={<Users className="h-8 w-8 text-primary-600" />}
              title="Community"
              description="Connect with students from your university"
            />
            <FeatureCard
              icon={<Car className="h-8 w-8 text-primary-600" />}
              title="Convenient"
              description="Easy booking and flexible scheduling"
            />
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section className="bg-gray-50 py-20">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">How It Works</h2>
          <div className="grid md:grid-cols-3 gap-8">
            <StepCard
              number="1"
              title="Sign Up"
              description="Create an account with your university email"
            />
            <StepCard
              number="2"
              title="Find or Offer Rides"
              description="Search for available rides or offer seats in your car"
            />
            <StepCard
              number="3"
              title="Travel Together"
              description="Meet your fellow students and share the journey"
            />
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-8">Ready to Get Started?</h2>
          <button
            onClick={() => navigate("/register")}
            className="px-8 py-4 bg-primary-600 text-white rounded-md hover:bg-primary-700"
          >
            Join SchoolPool Today
          </button>
        </div>
      </section>
    </Layout>
  );
};

interface FeatureCardProps {
  icon: React.ReactNode;
  title: string;
  description: string;
}

const FeatureCard: React.FC<FeatureCardProps> = ({
  icon,
  title,
  description,
}) => (
  <div className="text-center p-6">
    <div className="flex justify-center mb-4">{icon}</div>
    <h3 className="text-xl font-semibold mb-2">{title}</h3>
    <p className="text-gray-600">{description}</p>
  </div>
);

interface StepCardProps {
  number: string;
  title: string;
  description: string;
}

const StepCard: React.FC<StepCardProps> = ({ number, title, description }) => (
  <div className="text-center p-6">
    <div className="w-12 h-12 bg-primary-600 text-white rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
      {number}
    </div>
    <h3 className="text-xl font-semibold mb-2">{title}</h3>
    <p className="text-gray-600">{description}</p>
  </div>
);

export default LandingPage;

================
File: src/pages/profile/Profile.tsx
================
import { useNavigate } from "react-router-dom";
import { Settings, User, Mail, Phone, School, Car } from "lucide-react";
import Layout from "../../components/layout/Layout";
import { useAuth } from "../../contexts/AuthContext";
import { UserRole } from "../../types";

const Profile = () => {
  const navigate = useNavigate();
  const { user } = useAuth();

  if (!user) {
    return null;
  } else console.log(user);

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8 mt-16">
        <div className="max-w-3xl mx-auto">
          {/* Header with Settings Button */}
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold text-gray-900">Profile</h1>
            <div className="flex space-x-4">
              <button
                onClick={() => navigate("/profile/edit")}
                className="flex items-center px-4 py-2 text-primary-600 hover:text-primary-700"
              >
                <Settings size={20} className="mr-2" />
                Edit Profile
              </button>
            </div>
          </div>

          {/* Profile Card */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            {/* Basic Info Section */}
            <div className="flex items-start space-x-4 mb-6">
              <div className="bg-primary-100 rounded-full p-4">
                <User size={48} className="text-primary-600" />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  {user.firstName} {user.lastName}
                </h2>
                <p className="text-gray-500">
                  {user.role === UserRole.DRIVER ? "Driver" : "Rider"}
                </p>
              </div>
            </div>

            {/* Contact Information */}
            <div className="space-y-4 border-t pt-4">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Contact Information
              </h3>

              <div className="flex items-center text-gray-600">
                <Mail size={20} className="mr-3" />
                <div>
                  <p className="text-sm text-gray-500">Email</p>
                  <p>{user.email}</p>
                </div>
              </div>

              <div className="flex items-center text-gray-600">
                <Phone size={20} className="mr-3" />
                <div>
                  <p className="text-sm text-gray-500">Phone</p>
                  <p>{user.phone}</p>
                </div>
              </div>
            </div>

            {/* University Information */}
            <div className="space-y-4 border-t pt-4 mt-4">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                University Details
              </h3>

              <div className="flex items-center text-gray-600">
                <School size={20} className="mr-3" />
                <div>
                  <p className="text-sm text-gray-500">University</p>
                  <p>{user.university}</p>
                </div>
              </div>

              <div className="flex items-center text-gray-600">
                <Mail size={20} className="mr-3" />
                <div>
                  <p className="text-sm text-gray-500">University Email</p>
                  <p>{user.universityEmail}</p>
                </div>
              </div>
            </div>

            {/* Vehicle Documents - Only show for students */}
            {user.role === UserRole.DRIVER &&
              user.vehicleDetails &&
              user.vehicleDetails.length > 0 && (
                <div className="space-y-4 border-t pt-4 mt-4">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Documents
                  </h3>
                  <div className="grid grid-cols-2 gap-4">
                    {user.vehicleDetails[0].driverPhotoPath && (
                      <div>
                        <p className="text-sm text-gray-500 mb-2">
                          Driver Photo
                        </p>
                        <img
                          src={user.vehicleDetails[0].driverPhotoPath}
                          alt="Driver Photo"
                          className="w-full h-auto rounded-lg shadow"
                        />
                      </div>
                    )}
                    {user.vehicleDetails[0].licensePhotoPath && (
                      <div>
                        <p className="text-sm text-gray-500 mb-2">
                          License Photo
                        </p>
                        <img
                          src={user.vehicleDetails[0].licensePhotoPath}
                          alt="License Photo"
                          className="w-full h-auto rounded-lg shadow"
                        />
                      </div>
                    )}
                  </div>
                </div>
              )}

            {/* Vehicle Information - Only show for drivers */}
            {user.role === UserRole.DRIVER &&
              user.vehicleDetails &&
              user.vehicleDetails.length > 0 && (
                <div className="space-y-4 border-t pt-4 mt-4">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Vehicle Information
                  </h3>

                  {user.vehicleDetails.map((vehicle, index) => (
                    <div
                      key={index}
                      className="flex items-center text-gray-600"
                    >
                      <Car size={20} className="mr-3" />
                      <div>
                        <p className="text-sm text-gray-500">
                          Vehicle {index + 1}
                        </p>
                        <p>
                          {vehicle.make} {vehicle.model} -{" "}
                          {vehicle.licensePlate}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Profile;

================
File: src/pages/profile/Settings.tsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import Layout from '../../components/layout/Layout';
import { useAuth } from '../../contexts/AuthContext';
import { userService } from '../../services';
import { UserRole } from '../../types';

// Form validation schema
const settingsSchema = z.object({
  firstName: z.string().min(2, 'First name is required'),
  lastName: z.string().min(2, 'Last name is required'),
  email: z.string().email('Invalid email'),
  phone: z.string().min(10, 'Valid phone number is required'),
  universityEmail: z.string().email('Invalid university email')
    .refine(email => email.endsWith('.edu'), {
      message: 'Must be a valid university email'
    }),
  university: z.string().min(2, 'University name is required'),
  // Only required for drivers
  vehicleDetails: z.array(
    z.object({
      make: z.string().min(1, 'Make is required'),
      model: z.string().min(1, 'Model is required'),
      licensePlate: z.string().min(1, 'License plate is required'),
      driversLicense: z.string().min(1, 'Driver\'s license is required')
    })
  ).optional()
});

type SettingsFormData = z.infer<typeof settingsSchema>;

const Settings = () => {
  const navigate = useNavigate();
  const { user, setUser } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<SettingsFormData>({
    resolver: zodResolver(settingsSchema),
    defaultValues: {
      firstName: user?.firstName || '',
      lastName: user?.lastName || '',
      email: user?.email || '',
      phone: user?.phone || '',
      universityEmail: user?.universityEmail || '',
      university: user?.university || '',
      vehicleDetails: user?.vehicleDetails || []
    }
  });

  const onSubmit = async (data: SettingsFormData) => {
    if (!user?.phone) return;

    try {
      setIsSubmitting(true);
      setError('');

      const updatedUser = await userService.updateUser(user.phone, {
        ...user,
        ...data,
      });

      setUser(updatedUser);
      navigate('/profile');
    } catch (error) {
      console.error('Failed to update profile:', error);
      setError('Failed to update profile. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8 mt-16">
        <div className="max-w-2xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold text-gray-900">Profile Settings</h1>
            <button
              onClick={() => navigate('/profile')}
              className="text-gray-600 hover:text-gray-900"
            >
              Cancel
            </button>
          </div>

          {error && (
            <div className="mb-6 p-4 bg-red-50 text-red-600 rounded-md">
              {error}
            </div>
          )}

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Personal Information */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium mb-4">Personal Information</h2>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      First Name
                    </label>
                    <input
                      {...register('firstName')}
                      className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                    />
                    {errors.firstName && (
                      <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Last Name
                    </label>
                    <input
                      {...register('lastName')}
                      className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                    />
                    {errors.lastName && (
                      <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Phone Number
                  </label>
                  <input
                    {...register('phone')}
                    disabled
                    type="tel"
                    className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                  />
                  {errors.phone && (
                    <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email
                  </label>
                  <input
                    {...register('email')}
                    type="email"
                    className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                  />
                  {errors.email && (
                    <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* University Information */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium mb-4">University Information</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    University Email
                  </label>
                  <input
                    {...register('universityEmail')}
                    type="email"
                    disabled
                    className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                  />
                  {errors.universityEmail && (
                    <p className="mt-1 text-sm text-red-600">{errors.universityEmail.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    University
                  </label>
                  <input
                    {...register('university')}
                    className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                  />
                  {errors.university && (
                    <p className="mt-1 text-sm text-red-600">{errors.university.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Vehicle Information - Only for drivers */}
            {user?.role === UserRole.DRIVER && (
              <div className="bg-white rounded-lg shadow p-6">
                <h2 className="text-lg font-medium mb-4">Vehicle Information</h2>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Make
                    </label>
                    <input
                      {...register('vehicleDetails.0.make')}
                      className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                    />
                    {errors.vehicleDetails?.[0]?.make && (
                      <p className="mt-1 text-sm text-red-600">{errors.vehicleDetails[0].make.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Model
                    </label>
                    <input
                      {...register('vehicleDetails.0.model')}
                      className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                    />
                    {errors.vehicleDetails?.[0]?.model && (
                      <p className="mt-1 text-sm text-red-600">{errors.vehicleDetails[0].model.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      License Plate
                    </label>
                    <input
                      {...register('vehicleDetails.0.licensePlate')}
                      className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                    />
                    {errors.vehicleDetails?.[0]?.licensePlate && (
                      <p className="mt-1 text-sm text-red-600">{errors.vehicleDetails[0].licensePlate.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Driver's License
                    </label>
                    <input
                      {...register('vehicleDetails.0.driversLicense')}
                      className="w-full p-2 border rounded-md focus:ring-primary-500 focus:border-primary-500"
                    />
                    {errors.vehicleDetails?.[0]?.driversLicense && (
                      <p className="mt-1 text-sm text-red-600">{errors.vehicleDetails[0].driversLicense.message}</p>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Submit Button */}
            <div className="flex justify-end">
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-6 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:opacity-50"
              >
                {isSubmitting ? 'Saving...' : 'Save Changes'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
};

export default Settings;

================
File: src/pages/rider/Dashboard.tsx
================
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Plus,
  Calendar,
  MapPin,
  Users,
  Edit2,
  Clock,
  Trash2,
  Phone,
  User,
} from "lucide-react";
import Layout from "../../components/layout/Layout";
import { rideService, bookingService } from "../../services";
import { useAuth } from "../../contexts/AuthContext";
import { Ride, RideStatus, Booking, BookingStatus } from "../../types";
import { InformationCircleIcon } from "@heroicons/react/16/solid";

const RiderDashboard: React.FC = () => {
  const [rides, setRides] = useState<Ride[]>([]);
  const [pendingBookings, setPendingBookings] = useState<Booking[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingBookings, setIsLoadingBookings] = useState(true);
  const [error, setError] = useState<string>("");
  const navigate = useNavigate();
  const { user } = useAuth();
  const [confirmedBookings, setConfirmedBookings] = useState<Booking[]>([]);

  useEffect(() => {
    if (user?.phone) {
      loadRides();
      loadPendingBookings();
    }
  }, [user]);

  const loadRides = async () => {
    try {
      setIsLoading(true);
      setError("");
      const userRides = await rideService.getUserRides(user!.phone);
      console.log(userRides)
      setRides(userRides);
    } catch (error) {
      console.error("Error loading rides:", error);
      setError("Failed to load rides. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };

  // Add loading function for confirmed bookings
  const loadConfirmedBookings = async () => {
    try {
      if (!user?.phone) return;
      const bookings = await bookingService.getDriverBookings(user.phone);
      const confirmed = bookings.filter(
        (booking) => booking.status === BookingStatus.CONFIRMED
      );
      setConfirmedBookings(confirmed);
    } catch (error) {
      console.error("Error loading confirmed bookings:", error);
    }
  };

  // Add to useEffect
  useEffect(() => {
    if (user?.phone) {
      loadRides();
      loadPendingBookings();
      loadConfirmedBookings();
    }
  }, [user]);

  const loadPendingBookings = async () => {
    try {
      setIsLoadingBookings(true);
      if (user?.phone) {
        // Add a check for user existence
        const bookings = await bookingService.getDriverPendingBookings(
          user.phone
        );
        setPendingBookings(bookings);
      }
    } catch (error) {
      console.error("Error loading pending bookings:", error);
    } finally {
      setIsLoadingBookings(false);
    }
  };

  const handleBookingResponse = async (
    bookingId: string,
    status: BookingStatus
  ) => {
    try {
      await bookingService.respondToBooking(bookingId, status);
      // Refresh both bookings and rides
      loadPendingBookings();
      loadRides();
    } catch (error) {
      console.error("Error updating booking:", error);
    }
  };

  const handleDeleteRide = async (rideId: string) => {
    if (window.confirm("Are you sure you want to cancel this ride?")) {
      try {
        await rideService.deleteRide(rideId);
        loadRides();
      } catch (error) {
        console.error("Error deleting ride:", error);
      }
    }
  };

  const canStartRide = (departureTime: string): boolean => {
    const fifteenMinutesBefore = new Date(departureTime);
    fifteenMinutesBefore.setMinutes(fifteenMinutesBefore.getMinutes() - 15);
    return new Date() >= fifteenMinutesBefore;
  };

  const handleUpdateRideStatus = async (rideId: string, status: RideStatus) => {
    try {
      await rideService.updateRideStatus(rideId, status);
      loadRides(); // Refresh the rides list
    } catch (error) {
      console.error("Error updating ride status:", error);
      alert("Failed to update ride status");
    }
  };

  const formatDateTime = (dateTime: string) => {
    return new Date(dateTime).toLocaleString();
  };

  return (
    <Layout>
      <div className="container mx-auto px-4 py-2 mt-16">
        <div>
          <center>
            <h1 className="text-2xl items-center font-bold text-gray-900">
              Hello {user?.firstName}
            </h1>
          </center>
        </div>
        {/* Pending Bookings Section */}
        {!isLoadingBookings && pendingBookings.length > 0 && (
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              Pending Ride Requests ({pendingBookings.length})
            </h2>
            <div className="grid gap-4">
              {pendingBookings.map((booking) => (
                <div
                  key={booking.id}
                  className="bg-yellow-50 border border-yellow-100 rounded-lg p-4"
                >
                  <div className="flex justify-between items-start">
                    <div className="space-y-2">
                      <div className="flex items-center">
                        <Users className="h-5 w-5 text-gray-400 mr-2" />
                        <span className="font-medium">
                          {booking.passenger.firstName}{" "}
                          {booking.passenger.lastName}
                        </span>
                      </div>
                      <div className="text-sm text-gray-600">
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-1" />
                          {booking.ride.origin} → {booking.ride.destination}
                        </div>
                        <div className="flex items-center">
                          <Clock className="h-4 w-4 mr-1" />
                          Departure:{" "}
                          {formatDateTime(booking.ride.departureTime)}
                        </div>
                        <div>
                          Requested: {formatDateTime(booking.bookingTime)}
                        </div>
                      </div>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() =>
                          handleBookingResponse(
                            booking.id,
                            BookingStatus.CONFIRMED
                          )
                        }
                        className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm"
                        title="Accept request"
                      >
                        Accept
                      </button>
                      <button
                        onClick={() =>
                          handleBookingResponse(
                            booking.id,
                            BookingStatus.CANCELLED
                          )
                        }
                        className="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm"
                        title="Reject request"
                      >
                        Reject
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Error Message */}
        {error ? (
          <div className="text-red-600 text-center py-8">
            {error}
            <button
              onClick={loadRides}
              className="ml-4 text-primary-600 hover:text-primary-700 underline"
            >
              Try again
            </button>
          </div>
        ) : (
          <>
            <div className="flex justify-between items-center mb-8">
              <h1 className="text-2xl font-bold text-gray-900">
                Scheduled Rides
              </h1>
              <button
                onClick={() => {
                  if (!user?.isDriverVerified) {
                    // Handle the case where the user is not verified
                    // e.g., show an error message, redirect to verification page
                    alert("You need to be verified to schedule rides.");
                  } else {
                    navigate("/rides/new");
                  }
                }}
                className={`flex items-center px-4 py-2 rounded-md 
          ${
            user?.isDriverVerified
              ? "bg-primary-600 text-white hover:bg-primary-700"
              : "bg-gray-300 text-gray-500 cursor-not-allowed"
          }`}
              >
                <Plus size={20} className="mr-2" />
                Schedule Ride
              </button>
            </div>

            {isLoading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
              </div>
            ) : rides.length === 0 ? (
              <div className="text-center py-12 bg-white rounded-lg shadow-sm">
                <Calendar size={48} className="mx-auto text-gray-400 mb-4" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  No rides scheduled
                </h3>
                <p className="text-gray-600 mb-4">
                  Start by scheduling your first ride
                </p>
              </div>
            ) : (
              <div className="grid gap-6">
                {rides.sort((a, b) => new Date(a.departureTime).getTime() - new Date(b.departureTime).getTime()) // Sort ascending
                      .filter(
                        (ride) =>
                          ride.status !== RideStatus.COMPLETED // Add this condition
                      ).map((ride) => (
                  <div
                    key={ride.id}
                    className="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow"
                  >
                    <div className="flex justify-between items-start">
                      <div className="space-y-4">
                        <div className="flex items-center space-x-4">
                          <div className="flex items-center text-gray-600">
                            <Clock size={20} className="mr-2" />
                            {formatDateTime(ride.departureTime)}
                          </div>
                          <span
                            className={`px-2 py-1 rounded-full text-sm ${
                              ride.status === RideStatus.SCHEDULED
                                ? "bg-green-100 text-green-800"
                                : ride.status === RideStatus.IN_PROGRESS
                                ? "bg-blue-100 text-blue-800"
                                : ride.status === RideStatus.COMPLETED
                                ? "bg-gray-100 text-gray-800"
                                : "bg-red-100 text-red-800"
                            }`}
                          >
                            {ride.status}
                          </span>
                        </div>
                        <div className="space-y-2">
                          <div className="flex items-center text-gray-600">
                            <MapPin size={20} className="mr-2" />
                            From: {ride.origin}
                          </div>
                          <div className="flex items-center text-gray-600">
                            <MapPin size={20} className="mr-2" />
                            To: {ride.destination}
                          </div>
                        </div>
                        <div className="flex items-center text-gray-600">
                          <Users size={20} className="mr-2" />
                          {ride.availableSeats} seats available
                        </div>
                        <div className="flex items-center text-gray-600">
                          <InformationCircleIcon className="mr-2 h-5 w-5" />
                          Payments are received only through cash from the
                          students.
                        </div>
                      </div>
                      <div className="space-y-3">
                        <h4 className="font-medium text-gray-700">
                          Booked Passengers:
                        </h4>
                        {confirmedBookings
                          .filter((booking) => booking.ride.id === ride.id)
                          .map((booking) => (
                            <div
                              key={booking.id}
                              className="flex justify-between items-center bg-gray-50 p-3 rounded"
                            >
                              <div>
                                <p className="font-medium flex items-center">
                                  <User size={20} className="mr-1" />
                                  {booking.passenger.firstName}{" "}
                                  {booking.passenger.lastName}
                                </p>
                                <p className="text-sm text-gray-600 flex items-center">
                                  <Phone size={20} className="mr-1" />
                                  {booking.passenger.phone}
                                </p>
                                <span className="px-1 py-1 bg-green-100 text-green-800 rounded text-xs">
                                  Confirmed
                                </span>
                              </div>
                            </div>
                          ))}
                      </div>

                      {/* {ride.status === RideStatus.SCHEDULED &&
                        canStartRide(ride.departureTime) && (
                          <button
                            onClick={() =>
                              handleUpdateRideStatus(
                                ride.id,
                                RideStatus.IN_PROGRESS
                              )
                            }
                            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                          >
                            Start Ride
                          </button>
                        )}
                      {ride.status === RideStatus.IN_PROGRESS && (
                        <button
                          onClick={() =>
                            handleUpdateRideStatus(
                              ride.id,
                              RideStatus.COMPLETED
                            )
                          }
                          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                        >
                          End Ride
                        </button>
                      )}

                      {ride.status === RideStatus.SCHEDULED && (
                        <div className="flex space-x-2">
                          <button
                            onClick={() => navigate(`/rides/${ride.id}/edit`)}
                            className="p-2 text-gray-400 hover:text-primary-600 rounded-full hover:bg-gray-50"
                            title="Edit ride"
                          >
                            <Edit2 size={20} />
                          </button>
                          <button
                            onClick={() => handleDeleteRide(ride.id)}
                            className="p-2 text-gray-400 hover:text-red-600 rounded-full hover:bg-gray-50"
                            title="Cancel ride"
                          >
                            <Trash2 size={20} />
                          </button>
                        </div>
                      )} */}
                      {ride.status === RideStatus.SCHEDULED && (
                        <div className="flex space-x-2">
                          {canStartRide(ride.departureTime) && (
                            <button
                              onClick={() =>
                                handleUpdateRideStatus(
                                  ride.id,
                                  RideStatus.IN_PROGRESS
                                )
                              }
                              className="p-2 text-white bg-green-600 rounded-md hover:bg-green-700"
                              title="Start ride"
                            >
                              Start Ride
                            </button>
                          )}
                          <button
                            onClick={() => navigate(`/rides/${ride.id}/edit`)}
                            className="p-2 text-gray-400 hover:text-primary-600 rounded-full hover:bg-gray-50"
                            title="Edit ride"
                          >
                            <Edit2 size={20} />
                          </button>
                          <button
                            onClick={() => handleDeleteRide(ride.id)}
                            className="p-2 text-gray-400 hover:text-red-600 rounded-full hover:bg-gray-50"
                            title="Cancel ride"
                          >
                            <Trash2 size={20} />
                          </button>
                        </div>
                      )}
                      {ride.status === RideStatus.IN_PROGRESS && (
                        <button
                          onClick={() =>
                            handleUpdateRideStatus(
                              ride.id,
                              RideStatus.COMPLETED
                            )
                          }
                          className="p-2 text-white bg-blue-600 rounded-md hover:bg-blue-700"
                          title="End ride"
                        >
                          End Ride
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </>
        )}
      </div>
    </Layout>
  );
};

export default RiderDashboard;

================
File: src/pages/rider/RiderHistory.tsx
================
import { useEffect, useState } from "react";
import { Calendar, DollarSign, MapPin, Users } from "lucide-react";
import Layout from "../../components/layout/Layout";
import { useAuth } from "../../contexts/AuthContext";
import { Ride, RideStatus } from "../../types/models";
import { rideService } from "../../services";

const RiderHistory = () => {
  const { user } = useAuth();
  const [pastRides, setPastRides] = useState<Ride[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (user?.phone) {
      loadDriverRides();
    }
  }, [user]);

  const loadDriverRides = async () => {
    try {
      setIsLoading(true);
      const userRides = await rideService.getUserRides(user!.phone);
      
      // Filter rides that are either completed or cancelled
      const past = userRides.filter(ride => 
        ride.status === RideStatus.COMPLETED || 
        ride.status === RideStatus.CANCELLED
      );
      
      // Sort by departure time (most recent first)
      past.sort((a, b) => 
        new Date(b.departureTime).getTime() - new Date(a.departureTime).getTime()
      );
      
      setPastRides(past);
    } catch (error) {
      console.error("Error loading driver rides:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const formatDateTime = (dateTime: string) => {
    return new Date(dateTime).toLocaleString();
  };

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8 mt-16">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">
          Past Rides History
        </h2>
        {isLoading ? (
          <div className="text-center py-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
          </div>
        ) : pastRides.length === 0 ? (
          <div className="text-center py-4 bg-white rounded-lg shadow">
            <p className="text-gray-500">No ride history.</p>
          </div>
        ) : (
          <div className="space-y-4">
            {pastRides.map((ride) => (
              <div
                key={ride.id}
                className="bg-white rounded-lg shadow p-6 opacity-75"
              >
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-lg font-semibold mb-1">
                      {ride.origin} → {ride.destination}
                    </h3>
                  </div>
                  <div className="text-right">
                    <span className={`px-2 py-1 rounded-full text-sm ${
                      ride.status === RideStatus.COMPLETED 
                        ? "bg-green-100 text-green-800" 
                        : "bg-red-100 text-red-800"
                    }`}>
                      {ride.status}
                    </span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center text-gray-600">
                    <Calendar size={20} className="mr-2" />
                    {formatDateTime(ride.departureTime)}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <DollarSign size={20} className="mr-2" />
                    ${ride.price}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <Users size={20} className="mr-2" />
                    Seats Offered: {ride.totalSeats}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </Layout>
  );
};

export default RiderHistory;

================
File: src/pages/rides/EditRide.tsx
================
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { MapPin, Calendar, Clock, Users, DollarSign, BadgeDollarSign } from "lucide-react";
import Layout from "../../components/layout/Layout";
import { useAuth } from "../../contexts/AuthContext";
import { rideService } from "../../services";
import { Ride, RideStatus } from "../../types";

const editRideSchema = z.object({
  origin: z.string().min(1, "Starting location is required"),
  destination: z.string().min(1, "Destination is required"),
  departureTime: z.string().min(1, "Departure time is required"),
  totalSeats: z
    .number()
    .min(1, "Must offer at least 1 seat")
    .max(8, "Maximum 8 seats allowed"),
  price: z
    .number()
    .min(0, "Price must be positive")
    .max(1000, "Price too high"),
});

type EditRideForm = z.infer<typeof editRideSchema>;

const EditRide = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string>("");

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<EditRideForm>({
    resolver: zodResolver(editRideSchema),
  });

  // Load existing ride data
  useEffect(() => {
    const loadRide = async () => {
      try {
        if (!id) return;
        const ride = await rideService.getRideById(id);

        // Format the date for the datetime-local input
        const formattedDate = new Date(ride.departureTime)
          .toISOString()
          .slice(0, 16); // Format: YYYY-MM-DDTHH:mm

        reset({
          origin: ride.origin,
          destination: ride.destination,
          departureTime: formattedDate,
          totalSeats: ride.totalSeats,
          price: ride.price,
        });
      } catch (error) {
        console.error("Error loading ride:", error);
        setError("Failed to load ride details");
      } finally {
        setIsLoading(false);
      }
    };

    loadRide();
  }, [id, reset]);

  const onSubmit = async (data: EditRideForm) => {
    if (!id || !user) return;

    try {
      setIsSubmitting(true);
      setError("");

      // Only send fields that were changed
      const updatedFields: Partial<Ride> = {
        origin: data.origin,
        destination: data.destination,
        departureTime: new Date(data.departureTime).toISOString(),
        totalSeats: data.totalSeats,
        availableSeats: data.totalSeats, // Update available seats along with total seats
        price: data.price,
      };

      await rideService.updateRide(id, updatedFields);
      navigate("/dashboard");
    } catch (error) {
      console.error("Failed to update ride:", error);
      setError("Failed to update ride. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <Layout>
        <div className="flex justify-center items-center min-h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8 mt-16">
        <div className="max-w-2xl mx-auto">
          <h1 className="text-3xl font-bold text-gray-900 mb-8">Edit Ride</h1>

          {error && (
            <div className="mb-4 p-4 bg-red-50 text-red-600 rounded-md">
              {error}
            </div>
          )}

          <form
            onSubmit={handleSubmit(onSubmit)}
            className="space-y-6 bg-white rounded-lg shadow p-6"
          >
            {/* Origin */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Starting Location
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <MapPin className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...register("origin")}
                  type="text"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              {errors.origin && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.origin.message}
                </p>
              )}
            </div>

            {/* Destination */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Destination
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <MapPin className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...register("destination")}
                  type="text"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              {errors.destination && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.destination.message}
                </p>
              )}
            </div>

            {/* Departure Time */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Departure Time
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Clock className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...register("departureTime")}
                  type="datetime-local"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                  min={new Date().toISOString().slice(0, 16)}
                />
              </div>
              {errors.departureTime && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.departureTime.message}
                </p>
              )}
            </div>

            {/* Number of Seats */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Available Seats
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Users className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...register("totalSeats", { valueAsNumber: true })}
                  type="number"
                  min="1"
                  max="8"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              {errors.totalSeats && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.totalSeats.message}
                </p>
              )}
            </div>

            {/* Price */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Price per Seat
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <BadgeDollarSign className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...register("price", { valueAsNumber: true })}
                  type="number"
                  min="0"
                  step="0.01"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              {errors.price && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.price.message}
                </p>
              )}
            </div>

            {/* Submit Buttons */}
            <div className="flex justify-end space-x-4">
              <button
                type="button"
                onClick={() => navigate("/dashboard")}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:opacity-50"
              >
                {isSubmitting ? "Updating..." : "Update Ride"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </Layout>
  );
};

export default EditRide;

================
File: src/pages/rides/ScheduleRide.tsx
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { MapPin, Clock, Users, DollarSign, Currency, BadgeDollarSign } from "lucide-react";
import Layout from "../../components/layout/Layout";
import { useAuth } from "../../contexts/AuthContext";
import { rideService } from "../../services";
import { RideStatus } from "../../types";
import { LOCATIONS } from "../../constants/locations";
import { InformationCircleIcon } from "@heroicons/react/16/solid";

const scheduleRideSchema = z.object({
 origin: z.string().min(1, "Starting location is required"),
 destination: z.string().min(1, "Destination is required"),
 departureTime: z.string().min(1, "Departure time is required"),
 totalSeats: z.number().min(1, "Must offer at least 1 seat").max(8, "Maximum 8 seats allowed"),
 price: z.number().min(0, "Price must be positive").max(1000, "Price too high"),
});

type ScheduleRideForm = z.infer<typeof scheduleRideSchema>;

const ScheduleRide = () => {
 const navigate = useNavigate();
 const { user } = useAuth();
 const [isSubmitting, setIsSubmitting] = useState(false);
 const [originSearch, setOriginSearch] = useState("");
 const [destinationSearch, setDestinationSearch] = useState("");
 const [isOriginDropdownOpen, setIsOriginDropdownOpen] = useState(false);
 const [isDestinationDropdownOpen, setIsDestinationDropdownOpen] = useState(false);
 const [filteredOrigins, setFilteredOrigins] = useState<Array<[string, string]>>([]);
 const [filteredDestinations, setFilteredDestinations] = useState<Array<[string, string]>>([]);

 const {
   register,
   handleSubmit,
   setValue,
   formState: { errors },
 } = useForm<ScheduleRideForm>({
   resolver: zodResolver(scheduleRideSchema),
   defaultValues: {
     totalSeats: 1,
     price: 0,
   },
 });

 const filterLocations = (searchTerm: string, setFiltered: React.Dispatch<React.SetStateAction<Array<[string, string]>>>) => {
   const filtered = Object.entries(LOCATIONS).filter(([_, value]) =>
     value.toLowerCase().includes(searchTerm.toLowerCase())
   );
   setFiltered(filtered);
 };

 const onSubmit = async (data: ScheduleRideForm) => {
   if (!user) return;

   try {
     setIsSubmitting(true);
     const rideData = {
       ...data,
       driver: user,
       status: RideStatus.SCHEDULED,
       availableSeats: data.totalSeats,
     };
     await rideService.createRide(rideData);
     navigate("/dashboard");
   } catch (error) {
     console.error("Failed to schedule ride:", error);
   } finally {
     setIsSubmitting(false);
   }
 };

 return (
   <Layout>
     <div className="container mx-auto px-4 py-8 mt-16">
       <div className="max-w-2xl mx-auto">
         <h1 className="text-3xl font-bold text-gray-900 mb-8">Schedule a Ride</h1>

         <form onSubmit={handleSubmit(onSubmit)} className="space-y-6 bg-white rounded-lg shadow p-6">
           {/* Origin */}
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-1">Starting Location</label>
             <div className="relative">
               <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                 <MapPin className="h-5 w-5 text-gray-400" />
               </div>
               <input
                 type="text"
                 value={originSearch}
                 onChange={(e) => {
                   setOriginSearch(e.target.value);
                   filterLocations(e.target.value, setFilteredOrigins);
                   setIsOriginDropdownOpen(true);
                 }}
                 onFocus={() => {
                   filterLocations(originSearch, setFilteredOrigins);
                   setIsOriginDropdownOpen(true);
                 }}
                 className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                 placeholder="Search starting location..."
               />
               {isOriginDropdownOpen && filteredOrigins.length > 0 && (
                 <div className="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-md border max-h-60 overflow-y-auto">
                   {filteredOrigins.map(([key, value]) => (
                     <div
                       key={key}
                       className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                       onClick={() => {
                         setValue('origin', value);
                         setOriginSearch(value);
                         setIsOriginDropdownOpen(false);
                       }}
                     >
                       {value}
                     </div>
                   ))}
                 </div>
               )}
             </div>
             {errors.origin && <p className="mt-1 text-sm text-red-600">{errors.origin.message}</p>}
           </div>

           {/* Destination */}
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-1">Destination</label>
             <div className="relative">
               <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                 <MapPin className="h-5 w-5 text-gray-400" />
               </div>
               <input
                 type="text"
                 value={destinationSearch}
                 onChange={(e) => {
                   setDestinationSearch(e.target.value);
                   filterLocations(e.target.value, setFilteredDestinations);
                   setIsDestinationDropdownOpen(true);
                 }}
                 onFocus={() => {
                   filterLocations(destinationSearch, setFilteredDestinations);
                   setIsDestinationDropdownOpen(true);
                 }}
                 className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                 placeholder="Search destination..."
               />
               {isDestinationDropdownOpen && filteredDestinations.length > 0 && (
                 <div className="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-md border max-h-60 overflow-y-auto">
                   {filteredDestinations.map(([key, value]) => (
                     <div
                       key={key}
                       className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                       onClick={() => {
                         setValue('destination', value);
                         setDestinationSearch(value);
                         setIsDestinationDropdownOpen(false);
                       }}
                     >
                       {value}
                     </div>
                   ))}
                 </div>
               )}
             </div>
             {errors.destination && <p className="mt-1 text-sm text-red-600">{errors.destination.message}</p>}
           </div>

           {/* Departure Time */}
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-1">Departure Time</label>
             <div className="relative">
               <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                 <Clock className="h-5 w-5 text-gray-400" />
               </div>
               <input
                 {...register("departureTime")}
                 type="datetime-local"
                 className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                 
               />
             </div>
             {errors.departureTime && <p className="mt-1 text-sm text-red-600">{errors.departureTime.message}</p>}
           </div>

           {/* Seats */}
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-1">Available Seats</label>
             <div className="relative">
               <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                 <Users className="h-5 w-5 text-gray-400" />
               </div>
               <input
                 {...register("totalSeats", { valueAsNumber: true })}
                 type="number"
                 min="1"
                 max="8"
                 className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
               />
             </div>
             {errors.totalSeats && <p className="mt-1 text-sm text-red-600">{errors.totalSeats.message}</p>}
           </div>

           {/* Price */}
           <div>
             <label className="block text-sm font-medium text-gray-700 mb-1">Price per Seat</label>
             <div className="relative">
               <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                 <BadgeDollarSign className="h-5 w-5 text-gray-400" />
               </div>
               <input
                 {...register("price", { valueAsNumber: true })}
                 type="number"
                 min="0"
                 step="0.01"
                 className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
               />
             </div>
             {errors.price && <p className="mt-1 text-sm text-red-600">{errors.price.message}</p>}
           </div>

           <div className="flex items-center text-gray-600">
             <InformationCircleIcon className="mr-2 h-5 w-5" />
             Payments are received only through cash from the students.
           </div>

           {/* Submit Buttons */}
           <div className="flex justify-end space-x-4">
             <button
               type="button"
               onClick={() => navigate("/dashboard")}
               className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
             >
               Cancel
             </button>
             <button
               type="submit"
               disabled={isSubmitting}
               className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:opacity-50"
             >
               {isSubmitting ? "Scheduling..." : "Schedule Ride"}
             </button>
           </div>
         </form>
       </div>
     </div>
   </Layout>
 );
};

export default ScheduleRide;

================
File: src/pages/user/Dashboard.tsx
================
import React, { useState, useEffect } from "react";
import {
  Calendar,
  MapPin,
  School,
  Phone,
  BadgeDollarSign,
  Verified,
} from "lucide-react";
import Layout from "../../components/layout/Layout";
import { useAuth } from "../../contexts/AuthContext";
import { rideService, bookingService } from "../../services";
import { Ride, BookingStatus, Booking } from "../../types";
import { InformationCircleIcon } from "@heroicons/react/16/solid";

const UserDashboard = () => {
  const { user } = useAuth();
  const [rides, setRides] = useState<Ride[]>([]);
  const [filteredRides, setFilteredRides] = useState<Ride[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm] = useState("");
  const [dateFilter] = useState("");
  const [priceSort] = useState<"asc" | "desc" | "">("");
  const [confirmedRides, setConfirmedRides] = useState<Booking[]>([]);
  const [rideHistory, setRideHistory] = useState<Booking[]>([]);
  const [isLoadingConfirmed, setIsLoadingConfirmed] = useState(true);
  const [isLoadingHistory, setIsLoadingHistory] = useState(true);

  const [pendingRides, setPendingRides] = useState<Booking[]>([]);

  useEffect(() => {
    if (user?.phone) {
      console.log("User loaded, fetching rides:", user.phone);
      loadUserRides();
      loadRides();
    }
  }, []);

  const handleCancelRide = async (bookingId: string) => {
    try {
      await bookingService.updateBookingStatus(
        bookingId,
        BookingStatus.CANCELLED
      );
      alert("Ride request cancelled successfully!");
      // Reload rides to update the UI
      loadUserRides();
    } catch (error) {
      console.error("Error cancelling ride:", error);
      alert("Failed to cancel ride request. Please try again.");
    }
  };

  const loadUserRides = async () => {
    try {
      if (!user?.phone) {
        console.log("No user phone available");
        return;
      }

      setIsLoadingConfirmed(true);
      setIsLoadingHistory(true);

      console.log("Loading rides for user:", user.phone);
      const userBookings = await bookingService.getUserBookings(user.phone);
      console.log("Received bookings:", userBookings);

      const confirmed = userBookings.filter((booking) => {
        console.log("Checking booking:", booking);
        return (
          booking.status === BookingStatus.CONFIRMED &&
          new Date(booking.ride.departureTime) > new Date()
        );
      });

      const history = userBookings.filter(
        (booking) =>
          booking.status === BookingStatus.COMPLETED ||
          new Date(booking.ride.departureTime) < new Date()
      );

      const pendingRides = userBookings.filter(
        (booking) =>
          booking.status === BookingStatus.PENDING &&
          new Date(booking.ride.departureTime) > new Date()
      );

      setConfirmedRides(confirmed);
      setRideHistory(history);
      setPendingRides(pendingRides);
    } catch (error) {
      console.error("Error loading user rides:", error);
    } finally {
      setIsLoadingConfirmed(false);
      setIsLoadingHistory(false);
    }
  };

  const loadRides = async () => {
    try {
      setIsLoading(true);
      const availableRides = await rideService.getAvailableRides();
      console.log(availableRides);
      setRides(availableRides);
      setFilteredRides(availableRides);
    } catch (error) {
      console.error("Error loading rides:", error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    let result = [...rides];

    setFilteredRides(result);
  }, [searchTerm, dateFilter, priceSort, rides]);

  const handleRequestRide = async (ride: Ride) => {
    try {
      if (!user) return;

      const bookingData = {
        ride: ride,
        passenger: user,
        status: BookingStatus.PENDING,
        bookingTime: new Date().toISOString(),
      };

      await bookingService.createBooking(bookingData);
      // Show success message or notification
      alert("Ride request sent successfully!");
      loadUserRides();
    } catch (error) {
      console.error("Error requesting ride:", error);
      alert("Failed to request ride. Please try again.");
    }
  };

  const formatDateTime = (dateTime: string) => {
    return new Date(dateTime).toLocaleString();
  };

  return (
    <Layout>
      <div className="container mx-auto px-2 py-2 mt-8">
        {/* Search and Filters */}

        <div>
          <center>
            <h1 className="text-2xl items-center font-bold text-gray-900">
              Hello {user?.firstName}
            </h1>
          </center>
        </div>

        {/* Rides List */}
        <div className="space-y-4">
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              Available Rides
            </h2>
            {/* Your existing search, filters, and available rides list */}
          </div>

          {isLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
            </div>
          ) : filteredRides.length === 0 ? (
            <div className="text-center py-8 bg-white rounded-lg shadow">
              <p className="text-gray-500">
                No rides available matching your criteria.
              </p>
            </div>
          ) : (
            filteredRides.sort((a, b) => new Date(b.departureTime).getTime() - new Date(a.departureTime).getTime()) // Sort descending
              .filter(
                (ride) =>
                  !confirmedRides.some(
                    (confirmedRide) => confirmedRide.ride.id === ride.id
                  )
              )
              .map((ride) => (
                <div key={ride.id} className="bg-white rounded-lg shadow p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h3 className="text-lg font-semibold flex items-center">
                      {ride.driver.firstName} {ride.driver.lastName}
                      <Verified size={20} className="ml-2 text-green-500" />
                    </h3>
                    <div className="flex items-center">
                      <span className="mr-2">
                        {ride.availableSeats} Seats Available
                      </span>
                    </div>
                  </div>

                  <div className="space-y-2 mb-4">
                    <div className="flex items-center text-gray-600">
                      <MapPin size={20} className="mr-2" />
                      {ride.origin} → {ride.destination}
                    </div>
                    <div className="flex items-center text-gray-600">
                      <School size={20} className="mr-2" />
                      {ride.driver.university}
                    </div>
                    <div className="flex items-center text-gray-600">
                      <Calendar size={20} className="mr-2" />
                      Departure: {formatDateTime(ride.departureTime)}
                    </div>
                    <div className="flex items-center text-gray-600">
                      <BadgeDollarSign size={20} className="mr-2" />$
                      {ride.price}
                    </div>
                    <div className="flex items-center text-gray-600">
                      <InformationCircleIcon className="mr-2 h-5 w-5" />
                      Due to our policy payments are accepted only through cash
                      to the rider.
                    </div>
                  </div>

                  {pendingRides.some(
                    (pendingBooking) => pendingBooking.ride.id === ride.id
                  ) ? (
                    // Show Cancel button for pending rides
                    <button
                      onClick={() => {
                        const pendingBooking = pendingRides.find(
                          (booking) => booking.ride.id === ride.id
                        );
                        if (pendingBooking) {
                          handleCancelRide(pendingBooking.id);
                          loadRides();
                        }
                      }}
                      className="w-full py-2 px-4 rounded-md transition-colors bg-red-600 hover:bg-red-700 text-white"
                    >
                      Cancel Request
                    </button>
                  ) : (
                    // Show Request button for non-pending rides
                    <button
                      onClick={() => handleRequestRide(ride)}
                      disabled={(() => {
                        const isDisabled = pendingRides.some(
                          (pendingBooking) => {
                            return pendingBooking.ride.id === ride.id;
                          }
                        );
                        return isDisabled;
                      })()}
                      className={`w-full py-2 px-4 rounded-md transition-colors ${
                        pendingRides.some(
                          (pendingBooking) => pendingBooking.ride.id === ride.id
                        )
                          ? "bg-gray-400 cursor-not-allowed"
                          : "bg-primary-600 hover:bg-primary-700 text-white"
                      }`}
                    >
                      {pendingRides.some(
                        (pendingBooking) => pendingBooking.ride.id === ride.id
                      )
                        ? "Ride Request Pending"
                        : "Request Ride"}
                    </button>
                  )}
                </div>
              ))
          )}
        </div>
      </div>
      {/* Confirmed Rides Section */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">
          Upcoming Rides
        </h2>
        {isLoadingConfirmed ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          </div>
        ) : confirmedRides.length === 0 ? (
          <div className="text-center py-8 bg-white rounded-lg shadow">
            <p className="text-gray-500">No confirmed rides.</p>
          </div>
        ) : (
          <div className="space-y-4">
            {confirmedRides.map((booking) => (
              <div
                key={booking.id}
                className="bg-white rounded-lg shadow p-6 border-l-4 border-green-500"
              >
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-lg font-semibold">
                    Ride with {booking.ride.driver.firstName}
                  </h3>
                  <h3 className="text-lg font-semibold flex items-center">
                    <Phone size={20} className="mr-2" />
                    {booking.ride.driver.phone}
                  </h3>
                  <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                    Confirmed
                  </span>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center text-gray-600">
                    <MapPin size={20} className="mr-2" />
                    {booking.ride.origin} → {booking.ride.destination}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <Calendar size={20} className="mr-2" />
                    {formatDateTime(booking.ride.departureTime)}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <BadgeDollarSign size={20} className="mr-2" />$
                    {booking.ride.price}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <InformationCircleIcon className="mr-2 h-5 w-5" />
                    Due to our policy payments are accepted only through cash to
                    the rider.
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </Layout>
  );
};

export default UserDashboard;

================
File: src/pages/user/UserHistory.tsx
================
import { useEffect, useState } from "react";
import { Calendar, DollarSign, MapPin, Phone } from "lucide-react";
import Layout from "../../components/layout/Layout";
import { useAuth } from "../../contexts/AuthContext";
import { Booking } from "../../types/models";
import bookingService from "../../services/bookingService";
import { BookingStatus } from "../../types/enums";

const UserHistory = () => {
  const { user } = useAuth();
  const [rideHistory, setRideHistory] = useState<Booking[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (user?.phone) {
      loadUserRides();
    }
  }, [user]);

  const loadUserRides = async () => {
    try {
      setIsLoading(true);
      const userBookings = await bookingService.getUserBookings(user!.phone);

      const history = userBookings.filter(
        (booking) =>
          booking.status === BookingStatus.COMPLETED || BookingStatus.CANCELLED ||
          new Date(booking.ride.departureTime) < new Date()
      );

      setRideHistory(history);
    } catch (error) {
      console.error("Error loading user rides:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const formatDateTime = (dateTime: string) => {
    return new Date(dateTime).toLocaleString();
  };

  return (
    <Layout>
      <div className="container mx-auto px-4 py-8 mt-16">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">
          Ride History
        </h2>
        {isLoading ? (
          <div className="text-center py-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
          </div>
        ) : rideHistory.length === 0 ? (
          <div className="text-center py-4 bg-white rounded-lg shadow">
            <p className="text-gray-500">No ride history.</p>
          </div>
        ) : (
          <div className="space-y-4">
            {rideHistory.map((booking) => (
              <div
                key={booking.id}
                className="bg-white rounded-lg shadow p-6 opacity-75"
              >
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-lg font-semibold">
                    Ride with {booking.ride.driver.firstName}
                  </h3>
                  {/* <h3 className="text-lg font-semibold flex items-center">
                    <Phone size={20} className="mr-2" />
                    {booking.ride.driver.phone}
                  </h3> */}

                  <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-sm">
                    {booking.status}
                  </span>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center text-gray-600">
                    <MapPin size={20} className="mr-2" />
                    {booking.ride.origin} → {booking.ride.destination}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <Calendar size={20} className="mr-2" />
                    {formatDateTime(booking.ride.departureTime)}
                  </div>
                  <div className="flex items-center text-gray-600">
                    <DollarSign size={20} className="mr-2" />$
                    {booking.ride.price}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </Layout>
  );
};

export default UserHistory;

================
File: src/services/adminService.ts
================
// src/services/adminService.ts
import api from './api';
import { User, UserRole } from '../types';

class AdminService {
  private readonly BASE_PATH = '/api/admin';

  async getAllUsers(): Promise<User[]> {
    const response = await api.get(`${this.BASE_PATH}/users`);
    return response.data;
  }

  async getUsersByRole(role: UserRole): Promise<User[]> {
    const response = await api.get(`${this.BASE_PATH}/users/${role}`);
    return response.data;
  }

  async updateUser(id: string, userData: Partial<User>): Promise<User> {
    const response = await api.put(`${this.BASE_PATH}/users/${id}`, userData);
    return response.data;
  }

  async deleteUser(id: string): Promise<void> {
    await api.delete(`${this.BASE_PATH}/users/${id}`);
  }

  async verifyDriver(id: string): Promise<User> {
    const response = await api.put(`${this.BASE_PATH}/drivers/${id}/verify`);
    return response.data;
  }

}

export default new AdminService();

================
File: src/services/api.ts
================
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8081', // Match your Spring Boot port
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor - useful for adding auth tokens
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor - useful for handling errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized access
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;

================
File: src/services/bookingService.ts
================
import api from "./api";
import { Booking, ApiResponse, BookingStatus } from "../types";

class BookingService {
  private readonly BASE_PATH = "/bookings";

  async createBooking(
    bookingData: Omit<Booking, "id">
  ): Promise<ApiResponse<Booking>> {
    const response = await api.post<ApiResponse<Booking>>(
      this.BASE_PATH,
      bookingData
    );
    return response.data;
  }

  async getBookingById(id: string): Promise<Booking> {
    const response = await api.get<Booking>(`${this.BASE_PATH}/${id}`);
    return response.data;
  }

  // async getUserBookings(userId: string): Promise<Booking[]> {
  //   const response = await api.get<Booking[]>(`${this.BASE_PATH}/user/${userId}`);
  //   return response.data;
  // }

  async getUserBookings(userId: string): Promise<Booking[]> {
    try {
      console.log("Fetching bookings for user:", userId);
      const response = await api.get<Booking[]>(
        `${this.BASE_PATH}/user/${userId}`
      );
      console.log("Received bookings:", response.data);
      return response.data;
    } catch (error) {
      console.error("Error fetching user bookings:", error);
      throw error;
    }
  }

  async updateBookingStatus(id: string, status: string): Promise<Booking> {
    const response = await api.put<Booking>(
      `${this.BASE_PATH}/${id}/status?status=${status}`,  // Note: Changed to query parameter
    );
    return response.data;
}

  async cancelBooking(id: string): Promise<void> {
    await api.delete(`${this.BASE_PATH}/${id}`);
  }

  // Fix the URL to include phone parameter
  async getDriverPendingBookings(driverPhone: string): Promise<Booking[]> {
    try {
      const response = await api.get<Booking[]>(
        `${this.BASE_PATH}/driver/${driverPhone}/pending`
      );
      return response.data;
    } catch (error) {
      console.error("Error fetching pending bookings:", error);
      throw error;
    }
  }

  async getDriverBookings(driverPhone: string): Promise<Booking[]> {
    try {
      const response = await api.get<Booking[]>(`${this.BASE_PATH}/driver/${driverPhone}/all`);
      return response.data;
    } catch (error) {
      console.error('Error fetching driver bookings:', error);
      throw error;
    }
  }

  async respondToBooking(
    bookingId: string,
    status: BookingStatus
  ): Promise<Booking> {
    try {
      const response = await api.put<Booking>(
        `${this.BASE_PATH}/${bookingId}/status`,
        null,
        { params: { status } }
      );
      return response.data;
    } catch (error) {
      console.error("Error updating booking status:", error);
      throw error;
    }
  }
}

export default new BookingService();

================
File: src/services/imageService.ts
================
// services/imageService.ts
import api from './api';

class ImageService {
 async getImage(fileName: string): Promise<Blob> {
   const response = await api.get(`/images/${fileName}`, {
     responseType: 'blob'
   });
   return response.data;
 }

 getImageUrl(fileName: string): string {
   return `${api.defaults.baseURL}/images/${fileName}`;
 }
}

export default new ImageService();

================
File: src/services/index.ts
================
export { default as api } from './api';
export { default as userService } from './userService';
export { default as rideService } from './rideService';
export { default as bookingService } from './bookingService';
export { default as imageService} from './imageService'

================
File: src/services/rideService.ts
================
import api from './api';
import { Ride, ApiResponse, RideStatus } from '../types';

class RideService {
  private readonly BASE_PATH = '/rides';

  async createRide(rideData: Omit<Ride, 'id'>): Promise<ApiResponse<Ride>> {
    const response = await api.post<ApiResponse<Ride>>(this.BASE_PATH, rideData);
    return response.data;
  }

  async getRideById(id: string): Promise<Ride> {
    const response = await api.get<Ride>(`${this.BASE_PATH}/${id}`);
    return response.data;
  }

  async updateRide(id: string, updates: Partial<Ride>): Promise<Ride> {
    try {
      const response = await api.put<Ride>(`${this.BASE_PATH}/${id}`, updates);
      return response.data;
    } catch (error) {
      throw new Error('Failed to update ride');
    }
  }

  async deleteRide(id: string): Promise<void> {
    await api.delete(`${this.BASE_PATH}/${id}`);
  }

  async getUserRides(userId: string): Promise<Ride[]> {
    const response = await api.get<Ride[]>(`${this.BASE_PATH}/user/${userId}`);
    return response.data;
  }

  // Additional methods can be added here as needed
  async searchRides(params: {
    origin?: string;
    destination?: string;
    date?: string;
  }): Promise<Ride[]> {
    const response = await api.get<Ride[]>(this.BASE_PATH, { params });
    return response.data;
  }

  async getAvailableRides(): Promise<Ride[]> {
    try {
      const response = await api.get<Ride[]>(`${this.BASE_PATH}/available`);
      return response.data;
    } catch (error) {
      console.error('Error fetching available rides:', error);
      throw error;
    }
  }

  async updateRideStatus(id: string, status: RideStatus): Promise<Ride> {
    try {
      const response = await api.put<Ride>(`${this.BASE_PATH}/${id}/status`, null, {
        params: { status }
      });
      return response.data;
    } catch (error) {
      console.error('Error updating ride status:', error);
      throw error;
    }
  }
}

export default new RideService();

================
File: src/services/userService.ts
================
import api from './api';
import { User, RegisterRequest, ApiResponse, LoginRequest, UserRole } from '../types';

class UserService {
  private readonly BASE_PATH = '/users';

  // Add login method
  async userLogin(credentials: LoginRequest): Promise<User> {
    try {
      const response = await api.post<User>(`${this.BASE_PATH}/login`, credentials);
      console.log(response.data)
      const user = response.data;
      return user;
    } catch (error: any) {
      console.error('API Error:', error.response?.data || error.message);
      throw error;
    }
  }

  async register(userData: RegisterRequest, driverPhoto?: File, licensePhoto?: File): Promise<ApiResponse<User>> {
    try {
      const formData = new FormData();
      formData.append('userData', new Blob([JSON.stringify(userData)], { type: 'application/json' }));
      
      if (userData.role === UserRole.DRIVER) {
        if (driverPhoto) {
          const fileName = `${userData.phone}_driver${driverPhoto.name.substring(driverPhoto.name.lastIndexOf('.'))}`;
          formData.append('driverPhoto', driverPhoto, fileName);
        }
        if (licensePhoto) {
          const fileName = `${userData.phone}_license${licensePhoto.name.substring(licensePhoto.name.lastIndexOf('.'))}`;
          formData.append('licensePhoto', licensePhoto, fileName);
        }
      }
  
      console.log('FormData content:', [...formData.entries()]);
  
      const response = await api.post<ApiResponse<User>>(`${this.BASE_PATH}/register`, formData, {
        headers: { 
          'Content-Type': 'multipart/form-data'
        }
      });
      return response.data;
    } catch (error: any) {
      console.error('API Error:', error.response?.data || error.message);
      throw error;
    }
  }

  async getUserById(id: string): Promise<User> {
    try {
      const response = await api.get<User>(`${this.BASE_PATH}/${id}`);
      const user = response.data;
  
      if (user.role === UserRole.DRIVER && user.vehicleDetails) {
        user.vehicleDetails = user.vehicleDetails.map(vehicle => ({
          ...vehicle,
          driverPhotoPath: vehicle.driverPhotoPath ? `${vehicle.driverPhotoPath}` : undefined,
          licensePhotoPath: vehicle.licensePhotoPath ? `${vehicle.licensePhotoPath}` : undefined
        }));
      }
  
      return user;
    } catch (error) {
      console.error('Error fetching user:', error);
      throw error;
    }
  }

  async updateUser(id: string, userData: Partial<User>): Promise<User> {
    const response = await api.put<User>(`${this.BASE_PATH}/${id}`, userData);
    return response.data;
  }

  async deleteUser(id: string): Promise<void> {
    await api.delete(`${this.BASE_PATH}/${id}`);
  }
}

export default new UserService();

================
File: src/types/auth.ts
================
import { User } from "./models";

  export interface LoginResponse {
    user: User;
    token?: string; // If you implement JWT later
  }
  
  export interface AuthError {
    message: string;
    status: number;
  }

================
File: src/types/enums.ts
================
export enum UserRole {
    STUDENT = 'STUDENT',
    DRIVER = 'DRIVER',
    ADMIN = 'ADMIN'
  }
  
  export enum RideStatus {
    SCHEDULED = 'SCHEDULED',
    IN_PROGRESS = 'IN_PROGRESS',
    COMPLETED = 'COMPLETED',
    CANCELLED = 'CANCELLED'
  }
  
  export enum BookingStatus {
    PENDING = 'PENDING',
    CONFIRMED = 'CONFIRMED',
    CANCELLED = 'CANCELLED',
    COMPLETED = 'COMPLETED'
  }

  export enum RiderStatus {
    PENDING = 'PENDING',
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE'
  }

================
File: src/types/index.ts
================
export * from './enums';
export * from './models';

// Additional utility types
export type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;
export type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

================
File: src/types/LocationInputTypes.ts
================
// LocationInputTypes.ts
export interface LocationInputProps {
    value: string;
    onChange: (value: string) => void;
    placeholder: string;
    error?: string;
    name: string;
    register: any;
  }

================
File: src/types/models.ts
================
import { UserRole, RideStatus, BookingStatus } from './enums';

export interface LoginRequest {
  phone: string;
  password: string;
}

export interface Vehicle {
  make: string;
  model: string;
  licensePlate: string;
  driversLicense: string;
  driverPhotoPath?: string;
  licensePhotoPath?: string;
}
  
  export interface User {
    phone: string;  // Using as ID
    firstName: string;
    lastName: string;
    email: string;
    universityEmail: string;
    university: string;
    password: string;
    role: UserRole;
    rating: number;
    isDriverVerified: boolean;
    vehicleDetails?: Vehicle[];
  }

export interface GeoJsonPoint {
  type: 'Point';
  coordinates: [number, number]; // [longitude, latitude]
}

export interface Ride {
  id: string;
  driver: User;
  origin: string;
  destination: string;
  departureTime: string; // ISO date string
  totalSeats: number;
  availableSeats: number;
  price: number;
  status: RideStatus;
  locations?: string[];
  coordinates?: GeoJsonPoint[];
}

export interface Booking {
  id: string;
  ride: Ride;
  passenger: User;
  status: BookingStatus;
  bookingTime: string; // ISO date string
}

// Add these to your types/models.ts
export interface LoginRequest {
    phone: string;
    password: string;
  }
  
  export interface LoginResponse {
    success: boolean;
    message: string;
    user?: User;
    // Add any other fields your backend returns
  }

export interface RegisterRequest extends User {
  password: string;
}

export interface ApiResponse<T> {
  data: T;
  message: string;
  status: number;
}

export { RideStatus };

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",  // This ensures Tailwind processes all your React files
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
      },
    },
  },
  plugins: [],
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  
  plugins: [react(),],
})
